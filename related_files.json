{
  "other": [
    {
      "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\index.html",
      "content": "<!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\" /> <meta name=\"google-adsense-account\" content=\"ca-pub-1872365375645260\" /> <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" /> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /> <title>Vite + React</title> </head> <body> <div id=\"root\"></div> <script type=\"text/javascript\"> (function (l) { if (l.search[1] === \"/\") { var decoded = l.search .slice(1) .split(\"&\") .map(function (s) { return s.replace(/~and~/g, \"&\"); }) .join(\"&\"); window.history.replaceState( null, null, l.pathname.slice(0, -1) + \"?\" + decoded + l.hash ); } })(window.location); </script> <script type=\"module\" src=\"/src/main.jsx\"></script> <script> window.VITE_BACKEND_URL = \"https: </script> </body> </html> "
    },
    {
      "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\package.json",
      "content": "{ \"name\": \"feelio\", \"private\": true, \"version\": \"0.0.0\", \"homepage\": \"https: \"scripts\": { \"skibidi\": \"vite --force\", \"build\": \"vite build\", \"lint\": \"eslint .\", \"preview\": \"vite preview\", \"predeploy\": \"npm run build\", \"deploy\": \"gh-pages -d dist\", \"smt\": \"npm run build && npm run deploy\", \"vercel-build\": \"npm run build && mv dist backend/dist && cd backend && npm install\", \"start\": \"cd backend && npm install && node index.js && cd /\" }, \"dependencies\": { \"@emoji-mart/data\": \"^1.2.1\", \"@emoji-mart/react\": \"^1.1.1\", \"@heroicons/react\": \"^2.2.0\", \"@reduxjs/toolkit\": \"^2.5.1\", \"@tanstack/react-query\": \"^5.66.0\", \"axios\": \"^1.7.9\", \"emoji-mart\": \"^5.6.0\", \"framer-motion\": \"^12.0.6\", \"lucide-react\": \"^0.474.0\", \"moment\": \"^2.30.1\", \"openssl\": \"^2.0.0\", \"react\": \"^18.3.1\", \"react-dom\": \"^18.3.1\", \"react-dropzone\": \"^14.3.5\", \"react-quill\": \"^2.0.0\", \"react-redux\": \"^9.2.0\", \"react-router-dom\": \"^7.1.3\", \"socket.io-client\": \"^4.8.1\", \"terser\": \"^5.39.0\", \"ws\": \"^8.18.0\" }, \"devDependencies\": { \"@babel/core\": \"^7.26.9\", \"@babel/preset-env\": \"^7.26.9\", \"@babel/preset-react\": \"^7.26.3\", \"@eslint/js\": \"^9.17.0\", \"@types/react\": \"^18.3.18\", \"@types/react-dom\": \"^18.3.5\", \"@vitejs/plugin-react\": \"^4.3.4\", \"autoprefixer\": \"^10.4.20\", \"babel-loader\": \"^10.0.0\", \"dotenv\": \"^16.4.5\", \"eslint\": \"^9.17.0\", \"eslint-plugin-react\": \"^7.37.2\", \"eslint-plugin-react-hooks\": \"^5.0.0\", \"eslint-plugin-react-refresh\": \"^0.4.16\", \"gh-pages\": \"^6.3.0\", \"globals\": \"^15.14.0\", \"postcss\": \"^8.5.3\", \"supertest\": \"^7.0.0\", \"tailwind-scrollbar\": \"^3.0.0\", \"tailwindcss\": \"^3.4.3\", \"vite\": \"^6.0.5\" } } "
    },
    {
      "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\tailwind.config.js",
      "content": " module.exports = { content: [\"./index.html\", \"./src*.{js,ts,jsx,tsx}\", \"./src/index.css\"], theme: { extend: {}, }, plugins: [require(\"tailwind-scrollbar\")({ nocompatible: true })], }; "
    },
    {
      "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\temp.js",
      "content": "import React, { useState } from \"react\"; import { useDispatch } from \"react-redux\"; import { setUser } from \"../redux/userSlice\"; import { login } from \"../api\"; import { Link, useNavigate } from \"react-router-dom\"; import { SparklesIcon } from \"@heroicons/react/24/outline\"; const Login = () => { const dispatch = useDispatch(); const navigate = useNavigate(); const [email, setEmail] = useState(\"\"); const [password, setPassword] = useState(\"\"); const [error, setError] = useState(\"\"); const [loading, setLoading] = useState(false); const handleLogin = async (e) => { e.preventDefault(); setLoading(true); setError(\"\"); try { const response = await login({ email, password }); if (response.user && response.token) { localStorage.setItem(\"token\", response.token); dispatch( setUser({ user: response.user, token: response.token, }) ); navigate(\"/home\"); } else { setError(\"Invalid response from server. Please try again.\"); } } catch (err) { console.error(\"Error during login:\", err); if (err.response) { setError( err.response.data.message || \"Login failed. Please check your credentials.\" ); } else if (err.request) { setError(\"No response from server. Please check your connection.\"); } else { setError(\"An unexpected error occurred. Please try again.\"); } } finally { setLoading(false); } }; return ( <div className=\"min-h-screen bg-gray-950 flex items-center justify-center p-4\"> {} <div className=\"relative bg-gray-900/80 backdrop-blur-md border border-gray-800/50 rounded-2xl p-8 max-w-md w-full text-center space-y-6 overflow-hidden shadow-lg\"> {} <div className=\"flex justify-center relative\"> <SparklesIcon className=\"h-16 w-16 text-purple-400 relative z-10\" /> <div className=\"absolute w-32 h-32 bg-purple-600/20 blur-[50px] rounded-full\" /> </div> {} <h1 className=\"text-3xl font-bold bg-gradient-to-r from-purple-300 to-blue-300 bg-clip-text text-transparent\"> Welcome Back </h1> {} <form onSubmit={handleLogin} className=\"space-y-4\"> {} <div className=\"text-left\"> <label className=\"block text-sm font-medium text-gray-300 mb-1\"> Email </label> <input type=\"email\" placeholder=\"Enter your email\" value={email} onChange={(e) => setEmail(e.target.value)} className=\"w-full p-3 rounded-lg bg-gray-800/40 border border-gray-700/50 focus:ring-2 focus:ring-purple-500 focus:border-transparent text-white placeholder-gray-400\" required /> </div> {} <div className=\"text-left\"> <label className=\"block text-sm font-medium text-gray-300 mb-1\"> Password </label> <input type=\"password\" placeholder=\"Enter your password\" value={password} onChange={(e) => setPassword(e.target.value)} className=\"w-full p-3 rounded-lg bg-gray-800/40 border border-gray-700/50 focus:ring-2 focus:ring-purple-500 focus:border-transparent text-white placeholder-gray-400\" required /> </div> {} <button type=\"submit\" disabled={loading} className=\"w-full py-3 rounded-lg bg-gradient-to-r from-purple-600 to-blue-600 text-white font-medium hover:opacity-90 transition-all focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 relative overflow-hidden group mt-4\" > <span className=\"relative z-10\"> {loading ? ( <svg className=\"animate-spin h-5 w-5 text-white mx-auto\" xmlns=\"http: fill=\"none\" viewBox=\"0 0 24 24\" > <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\" ></circle> <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\" ></path> </svg> ) : ( \"Login\" )} </span> <div className=\"absolute inset-0 bg-gradient-to-r from-white/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300\" /> </button> {} {error && ( <p className=\"text-red-500 text-sm mt-4 text-center bg-red-900/20 p-2 rounded-lg\"> {error} </p> )} </form> {} <div className=\"relative flex items-center justify-center\"> <div className=\"flex-grow border-t border-gray-700/50\"></div> <span className=\"mx-4 text-gray-400\">or</span> <div className=\"flex-grow border-t border-gray-700/50\"></div> </div> {} <p className=\"mt-4 text-center text-gray-400\"> Don't have an account?{\" \"} <Link to=\"/register\" className=\"text-purple-400 hover:underline font-medium\" > Sign up </Link> </p> </div> </div> ); }; export default Login; "
    },
    {
      "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\vercel.json",
      "content": "{ \"version\": 2, \"builds\": [ { \"src\": \"backend/index.js\", \"use\": \"@vercel/node\" }, { \"src\": \"package.json\", \"use\": \"@vercel/static-build\", \"config\": { \"distDir\": \"dist\" } } ], \"routes\": [ {\"src\": \"/api/(.*)\", \"dest\": \"/backend/index.js\"}, {\"src\": \"/(.*)\", \"dest\": \"/dist/$1\"} ] }"
    },
    {
      "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\vite.config.js",
      "content": " import { defineConfig } from \"vite\"; import react from \"@vitejs/plugin-react\"; import dotenv from \"dotenv\"; dotenv.config(); export default defineConfig({ base: \"/\", plugins: [react()], server: { historyApiFallback: true, }, css: { postcss: { plugins: [require(\"tailwindcss\"), require(\"autoprefixer\")], }, }, define: { \"process.env\": Object.fromEntries( Object.entries(process.env).filter(([key]) => key.startsWith(\"VITE_\")) ), \"process.env.CLOUDINARY_NAME\": JSON.stringify(process.env.CLOUDINARY_NAME), }, }); "
    },
    {
      "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\webpack.config.js",
      "content": "const path = require(\"path\"); const Dotenv = require(\"dotenv-webpack\"); const webpack = require(\"webpack\"); module.exports = { mode: \"development\", entry: \"./src/api/index.js\", output: { path: path.resolve(__dirname, \"dist\"), filename: \"bundle.js\", }, module: { rules: [ { test: /\\.js$/, exclude: /node_modules/, use: { loader: \"babel-loader\", options: { presets: [\"@babel/preset-env\"], }, }, }, ], }, plugins: [ new Dotenv(), new webpack.DefinePlugin({ \"process.env\": JSON.stringify({ DEBUG: process.env.DEBUG, }), }), ], resolve: { fallback: { fs: false, path: false, }, }, }; "
    },
    {
      "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\public\\404.html",
      "content": "<!DOCTYPE html> <html> <head> <meta charset=\"utf-8\" /> <title>Redirecting...</title> <script> var pathSegmentsToKeep = 0; var l = window.location; l.replace( l.protocol + \" l.hostname + (l.port ? \":\" + l.port : \"\") + l.pathname .split(\"/\") .slice(0, 1 + pathSegmentsToKeep) .join(\"/\") + \"/?/\" + l.pathname .slice(1) .split(\"/\") .slice(pathSegmentsToKeep) .join(\"/\") .replace(/&/g, \"~and~\") + (l.search ? \"&\" + l.search.slice(1).replace(/&/g, \"~and~\") : \"\") + l.hash ); </script> </head> <body> Redirecting... </body> </html> "
    }
  ],
  "backend": [
    {
      "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\backend\\index.js",
      "content": "import express from \"express\"; import mongoose from \"mongoose\"; import cors from \"cors\"; import dotenv from \"dotenv\"; import path from \"path\"; import { fileURLToPath } from \"url\"; import cloudinary from \"cloudinary\"; import rateLimit from \"express-rate-limit\"; import serverless from \"serverless-http\"; dotenv.config(); const app = express(); const allowedOrigins = [ <<<<<<< HEAD \"https: \"http: \"http: \"https: process.env.VITE_BACKEND_URL || \"https:======= process.env.CLIENT_URL, \"https: \"http:>>>>>>> 79e76d037ba16894b5ba7dd1d838762c8ac82845 ]; app.use( cors({ origin: (origin, callback) => { if (!origin || allowedOrigins.includes(origin)) { callback(null, true); } else { callback(new Error(\"Not allowed by CORS\")); } }, credentials: true, methods: [\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"], allowedHeaders: [\"Content-Type\", \"Authorization\"], }) ); app.use(express.json()); app.options(\"*\", cors()); const limiter = rateLimit({ windowMs: 15 * 60 * 1000, max: 100, }); app.use(limiter); mongoose .connect(process.env.MONGO_URI) .then(() => console.log(\"Connected to MongoDB\")) .catch((err) => console.error(\"MongoDB Connection Error:\", err)); import userRoutes from \"./routes/userRoutes.js\"; import postRoutes from \"./routes/postRoutes.js\"; app.use(\"/api/users\", userRoutes); app.use(\"/api/posts\", postRoutes); const __dirname = path.dirname(fileURLToPath(import.meta.url)); app.use(express.static(path.join(__dirname, \"../dist\"))); app.get(\"*\", (req, res) => { res.sendFile(path.join(__dirname, \"dist\", \"index.html\")); }); app.get(\"/\", (req, res) => { res.send(\"Feelio API is running!\"); }); cloudinary.config({ cloud_name: process.env.CLOUDINARY_NAME, api_key: process.env.CLOUDINARY_KEY, api_secret: process.env.CLOUDINARY_SECRET, }); const handler = serverless(app); export { handler }; const PORT = process.env.PORT || 5000; app.listen(PORT, () => console.log(`Server running on port ${PORT}`)); "
    },
    {
      "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\backend\\package.json",
      "content": "{ \"name\": \"backend\", \"version\": \"1.0.0\", \"main\": \"index.js\", \"homepage\": \"https: \"scripts\": { \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\", \"start\": \"node index.js\", \"deploy\": \"gh-pages -d dist\", \"build\": \"echo 'No build step for server'\", \"dev\": \"nodemon index.js\" }, \"keywords\": [], \"author\": \"\", \"license\": \"ISC\", \"description\": \"\", \"dependencies\": { \"bcrypt\": \"^5.1.1\", \"cloudinary\": \"^1.41.3\", \"cors\": \"^2.8.5\", \"dotenv\": \"^16.4.7\", \"express\": \"^4.21.2\", \"express-rate-limit\": \"^7.5.0\", \"jsonwebtoken\": \"^9.0.2\", \"lusca\": \"^1.7.0\", \"mongodb\": \"^6.12.0\", \"mongoose\": \"^8.9.5\", \"multer\": \"^1.4.5-lts.1\", \"multer-storage-cloudinary\": \"^4.0.0\", \"serverless-http\": \"^3.2.0\" }, \"devDependencies\": { \"dotenv-webpack\": \"^8.1.0\", \"gh-pages\": \"^6.3.0\", \"webpack\": \"^5.98.0\", \"webpack-cli\": \"^6.0.1\", \"webpack-dev-server\": \"^5.2.0\" } } "
    },
    {
      "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\backend\\server.js",
      "content": "require(\"dotenv\").config(); const express = require(\"express\"); const mongoose = require(\"mongoose\"); const cors = require(\"cors\"); const helmet = require(\"helmet\"); const { xss } = require(\"express-xss-sanitizer\"); const mongoSanitize = require(\"express-mongo-sanitize\"); const cookieParser = require(\"cookie-parser\"); const lusca = require(\"lusca\"); const rateLimit = require(\"express-rate-limit\"); const hpp = require(\"hpp\"); const cluster = require(\"cluster\"); const os = require(\"os\"); const userRoutes = require(\"./routes/userRoutes\"); const postRoutes = require(\"./routes/postRoutes\"); const errorHandler = require(\"./middleware/errorHandler\"); const logger = require(\"./utils/logger\"); const app = express(); app.use( helmet({ contentSecurityPolicy: { directives: { defaultSrc: [\"'self'\"], scriptSrc: [\"'self'\", \"'unsafe-inline'\"], styleSrc: [\"'self'\", \"'unsafe-inline'\"], imgSrc: [\"'self'\", \"data:\", \"blob:\"], }, }, crossOriginResourcePolicy: { policy: \"cross-origin\" }, }) ); app.use(xss()); app.use(mongoSanitize()); app.use(hpp()); app.use(cookieParser()); app.use(express.json({ limit: \"10kb\" })); app.use(lusca.csrf()); const limiter = rateLimit({ windowMs: 15 * 60 * 1000, max: 200, message: \"Too many requests from this IP\", standardHeaders: true, legacyHeaders: false, }); app.use(\"/api\", limiter); let isConnected = false; const connectWithRetry = async () => { if (isConnected) return; try { await mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true, bufferCommands: false, }); isConnected = true; if (cluster.isMaster || cluster.worker.id === 1) { logger.info(\"MongoDB connected successfully\"); } } catch (err) { logger.error(`MongoDB connection failed: ${err.message}`); setTimeout(connectWithRetry, 5000); } }; if (process.env.NODE_ENV === \"production\" && cluster.isMaster) { const numWorkers = os.cpus().length; logger.info(`Master ${process.pid} is running`); for (let i = 0; i < numWorkers; i++) cluster.fork(); cluster.on(\"exit\", (worker) => { logger.warn(`Worker ${worker.process.pid} died`); cluster.fork(); }); } else { connectWithRetry(); app.use( cors({ origin: process.env.CLIENT_URL, credentials: true, methods: [\"GET\", \"POST\", \"PUT\", \"DELETE\"], allowedHeaders: [\"Content-Type\", \"Authorization\"], }) ); app.use(\"/api/v1/users\", userRoutes); app.use(\"/api/v1/posts\", postRoutes); app.get(\"/health\", (req, res) => res.status(200).json({ status: \"ok\" })); app.use(errorHandler); const PORT = process.env.PORT || 5000; const server = app.listen(PORT, () => { logger.info( `Server running in ${process.env.NODE_ENV} mode on port ${PORT}` ); }); process.on(\"unhandledRejection\", (err) => { logger.error(`Unhandled Rejection: ${err.message}`); server.close(() => process.exit(1)); }); } "
    },
    {
      "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\backend\\middleware\\verifyToken.js",
      "content": "const jwt = require(\"jsonwebtoken\"); const verifyToken = (req, res, next) => { const authHeader = req.headers.authorization; if (authHeader) { const token = authHeader.split(\" \")[1]; jwt.verify(token, process.env.JWT_SECRET, (err, decoded) => { if (err) { return res.status(403).json({ message: \"Token is not valid!\" }); } req.user = { id: decoded.userId }; next(); }); } else { return res.status(401).json({ message: \"You are not authenticated!\" }); } }; module.exports = verifyToken; "
    },
    {
      "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\backend\\routes\\postRoutes.js",
      "content": "const multer = require(\"multer\"); const path = require(\"path\"); const fs = require(\"fs\"); const router = require(\"express\").Router(); const Post = require(\"../models/Post\"); const verifyToken = require(\"../middleware/verifyToken\"); const cloudinary = require(\"cloudinary\").v2; const { CloudinaryStorage } = require(\"multer-storage-cloudinary\"); cloudinary.config({ cloud_name: process.env.CLOUDINARY_NAME, api_key: process.env.CLOUDINARY_KEY, api_secret: process.env.CLOUDINARY_SECRET, }); const storage = new CloudinaryStorage({ cloudinary: cloudinary, params: { folder: \"feelio/posts\", allowed_formats: [\"jpg\", \"jpeg\", \"png\", \"webp\"], quality: \"auto:best\", transformation: [ { width: 1000, height: 1000, crop: \"limit\" }, { fetch_format: \"auto\" }, ], use_filename: true, unique_filename: false, overwrite: true, }, }); const fileFilter = (req, file, cb) => { if ( [\"image/jpeg\", \"image/png\", \"image/jpg\", \"image/webp\"].includes( file.mimetype ) ) { cb(null, true); } else { cb( new Error(\"Invalid file type. Only JPEG, PNG, and JPG are allowed.\"), false ); } }; const upload = multer({ storage, fileFilter, limits: { fileSize: 10 * 1024 * 1024 }, }); router.post(\"/\", verifyToken, upload.single(\"image\"), async (req, res) => { try { console.log(\"Uploaded file:\", req.file); console.log(\"Request body:\", req.body); const { title, content } = req.body; const newPost = new Post({ title, content, user: req.user.id, }); if (req.file) { newPost.image = { public_id: req.file.filename, url: req.file.path, }; } else { console.log(\"No file uploaded\"); } const savedPost = await newPost.save(); res.status(201).json(savedPost); } catch (err) { console.error(\"Error creating post:\", err); res.status(500).json({ message: \"Server Error\" }); } }); router.get(\"/\", async (req, res) => { try { const page = parseInt(req.query.page) || 1; const limit = parseInt(req.query.limit) || 5; const skip = (page - 1) * limit; const posts = await Post.find() .sort({ createdAt: -1 }) .skip(skip) .limit(limit) .populate(\"user\", [\"username\"]) .populate(\"likes\", [\"username\"]) .populate(\"comments.user\", [\"username\"]); const totalPosts = await Post.countDocuments(); const hasMore = totalPosts > skip + limit; res.status(200).json({ posts, hasMore, totalPosts, currentPage: page, totalPages: Math.ceil(totalPosts / limit), }); } catch (err) { res.status(500).json({ message: \"Server Error\" }); } }); router.get(\"/:id\", async (req, res) => { try { const post = await Post.findById(req.params.id) .populate(\"user\", [\"username\"]) .populate(\"likes\", [\"username\"]) .populate(\"comments.user\", [\"username\"]) .lean(); if (!post) return res.status(404).json(\"Post not found\"); post.comments = post.comments.sort((a, b) => b.createdAt - a.createdAt); res.status(200).json(post); } catch (err) { res.status(500).json({ message: \"Server Error\" }); } }); router.put(\"/:id/like\", verifyToken, async (req, res) => { try { const post = await Post.findById(req.params.id); if (!post) return res.status(404).json({ message: \"Post not found\" }); const userId = req.user.id; if (post.likes.includes(userId)) { post.likes = post.likes.filter((id) => id.toString() !== userId); } else { post.likes.push(userId); } const updatedPost = await post.save(); const populatedPost = await Post.findById(updatedPost._id) .populate(\"user\", [\"username\"]) .populate(\"likes\", [\"username\"]); res.json(populatedPost); } catch (error) { console.error(error); res.status(500).json({ message: \"Server Error\" }); } }); router.post(\"/:id/comment\", verifyToken, async (req, res) => { try { if (!req.body.text || req.body.text.trim() === \"\") { return res.status(400).json(\"Comment text is required\"); } const post = await Post.findById(req.params.id); if (!post) return res.status(404).json(\"Post not found\"); const newComment = { text: req.body.text, user: req.user.id, createdAt: new Date(), }; post.comments.push(newComment); await post.save(); const updatedPost = await Post.findById(req.params.id) .populate(\"user\", [\"username\"]) .populate(\"likes\", [\"username\"]) .populate(\"comments.user\", [\"username\"]); res.status(200).json(updatedPost); } catch (err) { res.status(500).json({ message: \"Server Error\" }); } }); module.exports = router; "
    },
    {
      "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\backend\\routes\\userRoutes.js",
      "content": "const router = require(\"express\").Router(); const User = require(\"../models/User\"); const bcrypt = require(\"bcrypt\"); const jwt = require(\"jsonwebtoken\"); const verifyToken = require(\"../middleware/verifyToken\"); router.get(\"/me\", verifyToken, async (req, res) => { try { const user = await User.findById(req.user.id).select(\"-password\"); if (!user) { return res.status(404).json({ message: \"User not found\" }); } res.status(200).json(user); } catch (err) { res.status(500).json({ message: \"Server Error\" }); } }); router.post(\"/register\", async (req, res) => { try { const { username, email, password } = req.body; const existingUser = await User.findOne({ $or: [{ email }, { username }] }); if (existingUser) { const message = existingUser.email === email ? \"Email already exists\" : \"Username already exists\"; return res.status(400).json({ message }); } const hashedPassword = await bcrypt.hash(password, 10); const newUser = new User({ username, email, password: hashedPassword, }); const savedUser = await newUser.save(); const sanitizedUser = { _id: savedUser._id, username: savedUser.username, email: savedUser.email, }; const token = jwt.sign({ userId: savedUser._id }, process.env.JWT_SECRET, { expiresIn: \"1h\", }); res.status(201).json({ user: sanitizedUser, token }); } catch (err) { console.error(\"Registration error:\", err); res.status(500).json({ message: \"Server Error\" }); } }); router.post(\"/login\", async (req, res) => { try { const { email, password } = req.body; if (!email || !password) { return res .status(400) .json({ message: \"Email and password are required\" }); } const user = await User.findOne({ email: { $eq: email } }); if (!user) { return res.status(400).json({ message: \"User not found\" }); } const isMatch = await bcrypt.compare(password, user.password); if (!isMatch) { return res.status(400).json({ message: \"Invalid credentials\" }); } const sanitizedUser = { _id: user._id, username: user.username, email: user.email, }; const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: \"1h\", }); res.status(200).json({ user: sanitizedUser, token }); } catch (err) { console.error(\"Login error:\", err); res.status(500).json({ message: \"Server Error\" }); } }); module.exports = router; "
    }
  ],
  "frontend": [
    {
      "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\src\\App.jsx",
      "content": "import React, { useEffect, useState } from \"react\"; import { Provider, useDispatch, useSelector } from \"react-redux\"; import { BrowserRouter as Router, Routes, Route, Navigate, } from \"react-router-dom\"; import Home from \"./pages/Home\"; import Login from \"./pages/Login\"; import Register from \"./pages/Register\"; import Profile from \"./pages/Profile\"; import Navbar from \"./components/Navbar\"; import NotFound from \"./Components/NotFound\"; import { setUser } from \"./redux/userSlice\"; import { fetchUserData } from \"./api\"; import store from \"./redux/store\"; import \"./index.css\"; const AppContent = () => { const dispatch = useDispatch(); const { token } = useSelector((state) => state.user); const [darkMode, setDarkMode] = useState(false); const [loading, setLoading] = useState(true); useEffect(() => { const checkAuth = async () => { const token = localStorage.getItem(\"token\"); if (token) { try { const userData = await fetchUserData(); dispatch(setUser({ user: userData, token })); } catch (err) { console.error(\"Failed to fetch user data:\", err); localStorage.removeItem(\"token\"); } } setLoading(false); }; checkAuth(); }, [dispatch]); if (loading) return <div>Loading...</div>; return ( <div className={darkMode ? \"dark\" : \"\"}> <Router> <Navbar darkMode={darkMode} setDarkMode={setDarkMode} /> <Routes> <Route path=\"/\" element={ token ? ( <Navigate to=\"/home\" replace /> ) : ( <Navigate to=\"/login\" replace /> ) } /> <Route path=\"/home\" element={token ? <Home /> : <Navigate to=\"/login\" replace />} /> <Route path=\"/profile\" element={token ? <Profile /> : <Navigate to=\"/login\" replace />} /> <Route path=\"/login\" element={<Login />} /> <Route path=\"/register\" element={<Register />} /> <Route path=\"*\" element={<NotFound />} /> </Routes> </Router> </div> ); }; const App = () => ( <Provider store={store}> <AppContent /> </Provider> ); export default App; "
    },
    {
      "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\src\\main.jsx",
      "content": "import React from \"react\"; import { createRoot } from \"react-dom/client\"; import { Provider } from \"react-redux\"; import store from \"./redux/store\"; import \"./index.css\"; import \"./App.css\"; import App from \"./App\"; createRoot(document.getElementById(\"root\")).render( <Provider store={store}> <App /> </Provider> ); "
    },
    {
      "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\src\\api\\index.js",
      "content": "import axios from \"axios\"; const apiUrl = process.env.VITE_BACKEND_URL || (window.location.hostname === \"adorio.space\" ? \"https: : \"http: const API = axios.create({ baseURL: `${apiUrl}/api`, withCredentials: true, timeout: 10000, }); API.interceptors.request.use((req) => { const token = localStorage.getItem(\"token\"); if (token) req.headers.Authorization = `Bearer ${token}`; return req; }); export const register = async (userData) => { try { const response = await API.post(\"/users/register\", userData); return response.data; } catch (error) { console.error( \"Error registering user:\", error.response?.data || error.message ); throw new Error(error.response?.data?.message || \"Registration failed\"); } }; export const login = async (userData) => { try { const response = await API.post(\"/users/login\", userData); return response.data; } catch (error) { console.error(\"Error logging in:\", error); throw error; } }; export const fetchUserData = async () => { try { const response = await API.get(\"/users/me\"); return response.data; } catch (error) { console.error(\"Error fetching user data:\", error); throw error; } }; export { getPosts, createPost, likePost, addComment, getSinglePost, } from \"./posts\"; export default API; "
    },
    {
      "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\src\\api\\posts.js",
      "content": "import API from \"./index\"; export const getPosts = async (page = 1, limit = 5) => { try { const response = await API.get(`/posts?page=${page}&limit=${limit}`); console.log(\"Posts API Response:\", response); return response.data; } catch (error) { console.error(\"API Error Details:\", { status: error.response?.status, data: error.response?.data, config: error.config, }); throw new Error(error.response?.data?.message || \"Failed to fetch posts\"); } }; export const createPost = async (postData) => { try { const config = postData instanceof FormData ? { headers: {} } : { headers: { \"Content-Type\": \"application/json\" } }; const response = await API.post(\"/posts\", postData, config); return response.data; } catch (error) { console.error(\"Error creating post:\", error); throw error; } }; export const likePost = async (postId) => { try { const response = await API.put(`/posts/${postId}/like`); return response.data; } catch (error) { console.error(\"Error liking post:\", error.response?.data || error.message); throw error; } }; export const addComment = async (postId, commentText) => { try { const response = await API.post(`/posts/${postId}/comment`, { text: commentText, }); return response.data; } catch (error) { console.error(\"Error adding comment:\", error); throw error; } }; export const getSinglePost = async (postId) => { try { const response = await API.get(`/posts/${postId}`); return response.data; } catch (error) { console.error(\"Error fetching single post:\", error); throw error; } }; "
    },
    {
      "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\src\\api\\users.js",
      "content": "const axios = require(\"axios\"); const apiUrl = typeof window !== \"undefined\" ? window.VITE_BACKEND_URL + \"/api/\" : \"https: export const fetchUserData = async () => { try { const token = localStorage.getItem(\"token\"); const response = await axios.get(`${apiUrl}/users/me`, { headers: { Authorization: `Bearer ${token}`, }, }); return response.data.data.user; } catch (error) { throw new Error(\"Failed to fetch user data\"); } }; "
    },
    {
      "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\src\\Components\\NotFound.jsx",
      "content": "import React, { useEffect, useState, useRef } from \"react\"; import { SparklesIcon } from \"@heroicons/react/24/outline\"; import { motion, useMotionValue, useTransform, useSpring } from \"framer-motion\"; import { useNavigate } from \"react-router-dom\"; import { texts } from \"../../assests/404/messages\"; const NotFound = () => { const [randomText, setRandomText] = useState(\"\"); const navigate = useNavigate(); const containerRef = useRef(null); const mouseX = useMotionValue(0); const mouseY = useMotionValue(0); const smoothMouseX = useSpring(mouseX, { stiffness: 600, damping: 30 }); const smoothMouseY = useSpring(mouseY, { stiffness: 600, damping: 30 }); const lightPosition = useTransform( [smoothMouseX, smoothMouseY], ([x, y]) => `calc(${x}px - 50%) calc(${y}px - 50%)` ); const handleMouseMove = ({ clientX, clientY }) => { const rect = containerRef.current.getBoundingClientRect(); mouseX.set(clientX - rect.left + window.scrollX); mouseY.set(clientY - rect.top + window.scrollY); }; useEffect(() => { setRandomText(texts[Math.floor(Math.random() * texts.length)]); document.body.style.overflow = \"hidden\"; return () => (document.body.style.overflow = \"auto\"); }, []); return ( <div ref={containerRef} className=\"min-h-screen bg-gray-950 flex items-center justify-center p-4 overflow-hidden\" onMouseMove={handleMouseMove} > {} <motion.div style={{ backgroundPosition: lightPosition, opacity: useTransform( [smoothMouseX, smoothMouseY], ([x, y]) => 0.7 - Math.sqrt(x * x + y * y) / 2000 ), }} className=\"fixed inset-0 pointer-events-none bg-[radial-gradient(400px_at_50%_50%,rgba(129,140,248,0.4),transparent)] backdrop-blur-[2px] transition-opacity duration-300\" /> {} <motion.div style={{ rotateX: useTransform( smoothMouseY, [0, window.innerHeight], [15, -15] ), rotateY: useTransform( smoothMouseX, [0, window.innerWidth], [-15, 15] ), transformPerspective: 2000, }} className=\"relative bg-gray-900/90 backdrop-blur-2xl border border-gray-800/60 rounded-3xl p-8 max-w-md text-center space-y-6 overflow-hidden shadow-2xl\" > {} <div className=\"absolute inset-0 bg-gradient-to-br from-purple-600/10 to-blue-600/10 pointer-events-none\" /> {} <motion.div style={{ x: useTransform(smoothMouseX, [0, window.innerWidth], [-20, 20]), y: useTransform(smoothMouseY, [0, window.innerHeight], [-20, 20]), }} className=\"flex justify-center relative\" > <SparklesIcon className=\"h-16 w-16 text-purple-400 relative z-10\" /> <div className=\"absolute w-32 h-32 bg-purple-600/30 blur-[50px] rounded-full\" /> </motion.div> {} <motion.h1 style={{ textShadow: \"0 0 40px rgba(129,140,248,0.4)\", x: useTransform(smoothMouseX, [0, window.innerWidth], [-30, 30]), y: useTransform(smoothMouseY, [0, window.innerHeight], [-30, 30]), }} className=\"text-8xl font-black bg-gradient-to-r from-purple-300 to-blue-300 bg-clip-text text-transparent relative\" > 404 </motion.h1> {} <motion.p style={{ x: useTransform(smoothMouseX, [0, window.innerWidth], [-15, 15]), y: useTransform(smoothMouseY, [0, window.innerHeight], [-15, 15]), }} className=\"text-xl font-medium text-gray-300 uppercase tracking-widest\" > Lost in the Void </motion.p> {} <motion.div style={{ x: useTransform(smoothMouseX, [0, window.innerWidth], [-10, 10]), y: useTransform(smoothMouseY, [0, window.innerHeight], [-10, 10]), }} className=\"text-gray-400 text-lg italic px-4 relative\" > <span className=\"relative z-10\">{randomText}</span> <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-purple-600/15 to-transparent opacity-0 hover:opacity-100 transition-opacity duration-300\" /> </motion.div> {} <motion.button onClick={() => navigate(\"/\")} whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }} style={{ x: useTransform(smoothMouseX, [0, window.innerWidth], [-10, 10]), y: useTransform(smoothMouseY, [0, window.innerHeight], [-10, 10]), }} className=\"inline-flex items-center px-8 py-3.5 rounded-full bg-gradient-to-r from-purple-600 to-blue-600 text-white font-semibold shadow-xl hover:shadow-2xl transition-all duration-300 relative overflow-hidden group\" > <span className=\"relative z-10 flex items-center gap-2\"> <span>Return to Reality</span> <motion.svg viewBox=\"0 0 24 24\" className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" animate={{ x: [0, 2, 0] }} transition={{ duration: 1.2, repeat: Infinity }} > <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 7l5 5m0 0l-5 5m5-5H6\" /> </motion.svg> </span> <div className=\"absolute inset-0 bg-gradient-to-r from-white/25 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300\" /> </motion.button> </motion.div> </div> ); }; export default NotFound; "
    },
    {
      "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\src\\pages\\Login.jsx",
      "content": "import React, { useState } from \"react\"; import { useDispatch } from \"react-redux\"; import { setUser } from \"../redux/userSlice\"; import { login } from \"../api\"; import { Link, useNavigate } from \"react-router-dom\"; import { SparklesIcon } from \"@heroicons/react/24/outline\"; const Login = () => { const dispatch = useDispatch(); const navigate = useNavigate(); const [email, setEmail] = useState(\"\"); const [password, setPassword] = useState(\"\"); const [error, setError] = useState(\"\"); const [loading, setLoading] = useState(false); const handleLogin = async (e) => { e.preventDefault(); setLoading(true); setError(\"\"); try { const response = await login({ email, password }); if (response.user && response.token) { localStorage.setItem(\"token\", response.token); dispatch( setUser({ user: response.user, token: response.token, }) ); navigate(\"/home\"); } else { setError(\"Invalid response from server. Please try again.\"); } } catch (err) { console.error(\"Error during login:\", err); if (err.response) { setError( err.response.data.message || \"Login failed. Please check your credentials.\" ); } else if (err.request) { setError(\"No response from server. Please check your connection.\"); } else { setError(\"An unexpected error occurred. Please try again.\"); } } finally { setLoading(false); } }; return ( <div className=\"min-h-screen bg-gray-950 flex items-center justify-center p-4\"> {} <div className=\"relative bg-gray-900/80 backdrop-blur-md border border-gray-800/50 rounded-2xl p-8 max-w-md w-full text-center space-y-6 overflow-hidden shadow-lg\"> {} <div className=\"flex justify-center relative\"> <SparklesIcon className=\"h-16 w-16 text-purple-400 relative z-10\" /> <div className=\"absolute w-32 h-32 bg-purple-600/20 blur-[50px] rounded-full\" /> </div> {} <h1 className=\"text-3xl font-bold bg-gradient-to-r from-purple-300 to-blue-300 bg-clip-text text-transparent\"> Welcome Back </h1> {} <form onSubmit={handleLogin} className=\"space-y-4\"> {} <div className=\"text-left\"> <label className=\"block text-sm font-medium text-gray-300 mb-1\"> Email </label> <input type=\"email\" placeholder=\"Enter your email\" value={email} onChange={(e) => setEmail(e.target.value)} className=\"w-full p-3 rounded-lg bg-gray-800/40 border border-gray-700/50 focus:ring-2 focus:ring-purple-500 focus:border-transparent text-white placeholder-gray-400\" required /> </div> {} <div className=\"text-left\"> <label className=\"block text-sm font-medium text-gray-300 mb-1\"> Password </label> <input type=\"password\" placeholder=\"Enter your password\" value={password} onChange={(e) => setPassword(e.target.value)} className=\"w-full p-3 rounded-lg bg-gray-800/40 border border-gray-700/50 focus:ring-2 focus:ring-purple-500 focus:border-transparent text-white placeholder-gray-400\" required /> </div> {} <button type=\"submit\" disabled={loading} className=\"w-full py-3 rounded-lg bg-gradient-to-r from-purple-600 to-blue-600 text-white font-medium hover:opacity-90 transition-all focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 relative overflow-hidden group mt-4\" > <span className=\"relative z-10\"> {loading ? ( <svg className=\"animate-spin h-5 w-5 text-white mx-auto\" xmlns=\"http: fill=\"none\" viewBox=\"0 0 24 24\" > <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\" ></circle> <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\" ></path> </svg> ) : ( \"Login\" )} </span> <div className=\"absolute inset-0 bg-gradient-to-r from-white/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300\" /> </button> {} {error && ( <p className=\"text-red-500 text-sm mt-4 text-center bg-red-900/20 p-2 rounded-lg\"> {error} </p> )} </form> {} <div className=\"relative flex items-center justify-center\"> <div className=\"flex-grow border-t border-gray-700/50\"></div> <span className=\"mx-4 text-gray-400\">or</span> <div className=\"flex-grow border-t border-gray-700/50\"></div> </div> {} <p className=\"mt-4 text-center text-gray-400\"> Don't have an account?{\" \"} <Link to=\"/register\" className=\"text-purple-400 hover:underline font-medium\" > Sign up </Link> </p> </div> </div> ); }; export default Login; "
    },
    {
      "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\src\\pages\\Register.jsx",
      "content": "import React, { useState } from \"react\"; import { useDispatch } from \"react-redux\"; import { setUser } from \"../redux/userSlice\"; import { register } from \"../api\"; import { Link, useNavigate } from \"react-router-dom\"; import { SparklesIcon } from \"@heroicons/react/24/outline\"; const Register = () => { const dispatch = useDispatch(); const navigate = useNavigate(); const [username, setUsername] = useState(\"\"); const [email, setEmail] = useState(\"\"); const [password, setPassword] = useState(\"\"); const [error, setError] = useState(\"\"); const [loading, setLoading] = useState(false); const handleRegister = async (e) => { e.preventDefault(); setLoading(true); setError(\"\"); try { const response = await register({ username, email, password }); if (response && response.user && response.token) { localStorage.setItem(\"token\", response.token); dispatch( setUser({ user: response.user, token: response.token, }) ); navigate(\"/home\"); } else { setError(\"Unexpected response data format\"); } } catch (err) { console.error(\"Error during registration:\", err); if (err.response) { setError( err.response.data.message || \"Registration failed: Unknown error\" ); } else { setError(\"Registration failed: No response from server\"); } } finally { setLoading(false); } }; return ( <div className=\"min-h-screen bg-gray-950 flex items-center justify-center p-4\"> {} <div className=\"relative bg-gray-900/80 backdrop-blur-md border border-gray-800/50 rounded-2xl p-8 max-w-md w-full text-center space-y-6 overflow-hidden shadow-lg\"> {} <div className=\"flex justify-center relative\"> <SparklesIcon className=\"h-16 w-16 text-purple-400 relative z-10\" /> <div className=\"absolute w-32 h-32 bg-purple-600/20 blur-[50px] rounded-full\" /> </div> {} <h1 className=\"text-3xl font-bold bg-gradient-to-r from-purple-300 to-blue-300 bg-clip-text text-transparent\"> Create Account </h1> {} <form onSubmit={handleRegister} className=\"space-y-4\"> {} <div className=\"text-left\"> <label className=\"block text-sm font-medium text-gray-300 mb-1\"> Username </label> <input type=\"text\" placeholder=\"Enter your username\" value={username} onChange={(e) => setUsername(e.target.value)} className=\"w-full p-3 rounded-lg bg-gray-800/40 border border-gray-700/50 focus:ring-2 focus:ring-purple-500 focus:border-transparent text-white placeholder-gray-400\" required /> </div> {} <div className=\"text-left\"> <label className=\"block text-sm font-medium text-gray-300 mb-1\"> Email </label> <input type=\"email\" placeholder=\"Enter your email\" value={email} onChange={(e) => setEmail(e.target.value)} className=\"w-full p-3 rounded-lg bg-gray-800/40 border border-gray-700/50 focus:ring-2 focus:ring-purple-500 focus:border-transparent text-white placeholder-gray-400\" required /> </div> {} <div className=\"text-left\"> <label className=\"block text-sm font-medium text-gray-300 mb-1\"> Password </label> <input type=\"password\" placeholder=\"Enter your password\" value={password} onChange={(e) => setPassword(e.target.value)} className=\"w-full p-3 rounded-lg bg-gray-800/40 border border-gray-700/50 focus:ring-2 focus:ring-purple-500 focus:border-transparent text-white placeholder-gray-400\" required /> </div> {} <button type=\"submit\" disabled={loading} className=\"w-full py-3 rounded-lg bg-gradient-to-r from-purple-600 to-blue-600 text-white font-medium hover:opacity-90 transition-all focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 relative overflow-hidden group mt-4\" > <span className=\"relative z-10\"> {loading ? ( <svg className=\"animate-spin h-5 w-5 text-white mx-auto\" xmlns=\"http: fill=\"none\" viewBox=\"0 0 24 24\" > <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\" ></circle> <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\" ></path> </svg> ) : ( \"Create Account\" )} </span> <div className=\"absolute inset-0 bg-gradient-to-r from-white/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300\" /> </button> {} {error && ( <p className=\"text-red-500 text-sm mt-4 text-center bg-red-900/20 p-2 rounded-lg\"> {error} </p> )} </form> {} <div className=\"relative flex items-center justify-center\"> <div className=\"flex-grow border-t border-gray-700/50\"></div> <span className=\"mx-4 text-gray-400\">or</span> <div className=\"flex-grow border-t border-gray-700/50\"></div> </div> {} <p className=\"mt-4 text-center text-gray-400\"> Already have an account?{\" \"} <Link to=\"/login\" className=\"text-purple-400 hover:underline font-medium\" > Log in </Link> </p> </div> </div> ); }; export default Register; "
    }
  ]
}