  {
    "other": [
      {
        "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\package.json",
        "content": "{ \"name\": \"feelio\", \"private\": true, \"version\": \"0.0.0\", \"homepage\": \"https: \"scripts\": { \"skibidi\": \"vite --force\", \"build\": \"vite build\", \"lint\": \"eslint .\", \"preview\": \"vite preview\", \"predeploy\": \"npm run build\", \"deploy\": \"gh-pages -d dist\", \"smt\": \"npm run build && npm run deploy\", \"start\": \"cd backend && npm install && node index.js && cd /\" }, \"dependencies\": { \"@heroicons/react\": \"^2.2.0\", \"@reduxjs/toolkit\": \"^2.5.1\", \"@tanstack/react-query\": \"^5.66.0\", \"axios\": \"^1.7.9\", \"framer-motion\": \"^12.0.6\", \"lucide-react\": \"^0.474.0\", \"moment\": \"^2.30.1\", \"puppeteer\": \"^24.3.0\", \"react\": \"^18.3.1\", \"react-dom\": \"^18.3.1\", \"react-dropzone\": \"^14.3.5\", \"react-quill\": \"^2.0.0\", \"react-redux\": \"^9.2.0\", \"react-router-dom\": \"^7.1.3\", \"socket.io-client\": \"^4.8.1\", \"terser\": \"^5.39.0\", \"ws\": \"^8.18.0\" }, \"devDependencies\": { \"@babel/core\": \"^7.26.9\", \"@babel/preset-env\": \"^7.26.9\", \"@babel/preset-react\": \"^7.26.3\", \"@eslint/js\": \"^9.17.0\", \"@types/react\": \"^18.3.18\", \"@types/react-dom\": \"^18.3.5\", \"@vitejs/plugin-react\": \"^4.3.4\", \"autoprefixer\": \"^10.4.20\", \"babel-loader\": \"^10.0.0\", \"dotenv\": \"^16.4.5\", \"eslint\": \"^9.17.0\", \"eslint-plugin-react\": \"^7.37.2\", \"eslint-plugin-react-hooks\": \"^5.0.0\", \"eslint-plugin-react-refresh\": \"^0.4.16\", \"gh-pages\": \"^6.3.0\", \"globals\": \"^15.14.0\", \"postcss\": \"^8.5.3\", \"supertest\": \"^7.0.0\", \"tailwind-scrollbar\": \"^3.0.0\", \"tailwindcss\": \"^3.4.3\", \"vite\": \"^6.0.5\" } } "
      },
      {
        "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\related_files.json",
        "content": "{ \"other\": [ { \"file\": \"C:\\\\Users\\\\mykal\\\\Documents\\\\F\\\\feelio.github.io\\\\index.html\", \"content\": \"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\" /> <meta name=\\\"google-adsense-account\\\" content=\\\"ca-pub-1872365375645260\\\" /> <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" /> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" /> <title>Vite + React</title> </head> <body> <div id=\\\"root\\\"></div> <script type=\\\"text/javascript\\\"> (function (l) { if (l.search[1] === \\\"/\\\") { var decoded = l.search .slice(1) .split(\\\"&\\\") .map(function (s) { return s.replace(/~and~/g, \\\"&\\\"); }) .join(\\\"&\\\"); window.history.replaceState( null, null, l.pathname.slice(0, -1) + \\\"?\\\" + decoded + l.hash ); } })(window.location); </script> <script type=\\\"module\\\" src=\\\"/src/main.jsx\\\"></script> <script> window.VITE_BACKEND_URL = \\\"https: </script> </body> </html> \" }, { \"file\": \"C:\\\\Users\\\\mykal\\\\Documents\\\\F\\\\feelio.github.io\\\\assests\\\\404\\\\messages.js\", \"content\": \"export const texts = [ \\\"404: Page got Thanos-snapped\\\", \\\"Error: Skill issue detected\\\", \\\"This URL is now a TikTok dance\\\", \\\"Page not found (it's rizzing up another website)\\\", \\\"404: Link became a Discord mod\\\", \\\"This page is Ohio \\ud83d\\udc80\\\", \\\"Connection terminated (gyatt in the chat)\\\", \\\"Page went full Skibidi Toilet\\\", \\\"404: Sigma edit failed\\\", \\\"This page is in its Baby Gronk era\\\", \\\"Error: Too much rizz overload\\\", \\\"Page not found (caught in 4K)\\\", \\\"404: Fanum Tax deducted this page\\\", \\\"This URL is doing the Grimace Shake\\\", \\\"Server error: Kai Cenat stream crashed it\\\", \\\"Page is currently Lizzing (iykyk)\\\", \\\"404: Link got the Ice Spice 'munch' treatment\\\", \\\"This page is a Minecraft YouTuber now\\\", \\\"Error: Certified Hood Classic\\\", \\\"Page not found (it's a NPC)\\\", \\\"404: Bro thinks he's the main character\\\", \\\"This page is on a Sidequest (Adin Ross style)\\\", \\\"Link got ratio'd by a Twitter bot\\\", \\\"Error: Touch grass protocol activated\\\", \\\"Page is stuck in a Chucky cheese ball pit\\\", \\\"404: Midjourney generated this error\\\", \\\"This URL became a Temu ad\\\", \\\"Error: Caught lacking (no rizz)\\\", \\\"Page not found (it's a Sussy Baka)\\\", \\\"404: OnlyFans exclusive content\\\", \\\"This page joined the Dark Brandonverse\\\", \\\"Error: Cringe culture cancelled it\\\", \\\"Page is now a Roblox YouTuber intro\\\", \\\"404: Fanfiction deleted this link\\\", \\\"This URL failed the Buss It Challenge\\\", \\\"Error: 21 Savage concert crashed server\\\", \\\"Page not found (Shein version)\\\", \\\"404: Link got Yeeted\\\", \\\"This page is a DeviantArt OC now\\\", \\\"Error: Discord kitten overload\\\", \\\"Page became a Reddit mod (RIP)\\\", \\\"404: Certified L + Ratio Moment\\\", \\\"This URL is now a Bingo tournament\\\", \\\"Error: Twitter Blue checkmark expired\\\", \\\"Page not found (Vine boom sound)\\\", \\\"404: Link got Demon Time'd\\\", \\\"This page is in the Backrooms (Level 3999)\\\", \\\"Error: Andrew Tate's Bugatti crashed here\\\", \\\"Page became a Minecraft speedrun\\\", \\\"404: Only Up! (but it's gone)\\\", \\\"This URL is a MrBeast thumbnail now\\\", \\\"Error: Kai Cenat pizza incident\\\", \\\"Page not found (Fanum Tax evasion)\\\", \\\"404: It's Morbin' Time\\\", \\\"This page is a Fortnite Lobby\\\", \\\"Error: Caught in 144p (no gyatt)\\\", \\\"Link became a Twitter Space host\\\", \\\"404: Page got Doja Cat'ed (scandal arc)\\\", \\\"This URL is now a Sssniperwolf face reveal\\\", \\\"Error: KSI Prime hydration failed\\\", \\\"Page not found (it's Baby Shark now)\\\", \\\"404: Link became a Valorant streamer\\\", \\\"This page is in its K-Pop fancam era\\\", \\\"Error: No bitches? \\ud83e\\udd64\\\", \\\"Page is now a Dream SMP fanfic\\\", \\\"404: Certified Goofy Ahh Moment\\\", \\\"This URL failed the Blue Lock trials\\\", \\\"Error: Fumbled the Griddy\\\", \\\"Page not found (Only in Ohio \\ud83d\\ude08)\\\", \\\"404: Link became a Twitter Spaces DJ\\\", \\\"This page is a 2016 Minecraft parody song\\\", \\\"Error: TikTok brainrot detected\\\", \\\"Page got Yeet-ed into the void\\\", \\\"404: Certified Bruh Moment\\u2122\\\", \\\"This URL is now a Spotify AI cover\\\", \\\"Error: Twitter (X) algorithm shadowban\\\", \\\"Page not found (it's a LankyBox video)\\\", \\\"404: Link became a MrBeast challenge\\\", \\\"This page is in its E-Girl arc\\\", \\\"Error: 100T Content House drama\\\", \\\"Page got the Kai Cenat 100 Thieves treatment\\\", \\\"404: Certified Cringe Fail Compilation\\\", \\\"This URL is now a Minecraft parkour map\\\", \\\"Error: TikTok unboxing video crashed it\\\", \\\"Page not found (it's a BTS fan edit)\\\", \\\"404: Link became a Twitch copypasta\\\", \\\"This page is doing the GTA6 leak walk\\\", \\\"Error: YouTube Shorts attention span\\\", \\\"Page got Demon Slayer'ed (entertainment arc)\\\", \\\"404: Certified Twitter (X) Doxxing Moment\\\", \\\"This URL is now a OnlyJayus apology video\\\", \\\"Error: Discord light mode user detected\\\", \\\"Page not found (it's a Kai Cenat react stream)\\\", \\\"404: Link became a Logan Paul NFT\\\", \\\"This page is in its Corpse Husband era\\\", \\\"Error: Twitter Spaces echo chamber\\\", \\\"Page got the 'I showed you my...' treatment\\\", \\\"404: Certified Cbat Moment \\ud83c\\udfb6\\\", \\\"This URL is now a Minecraft Dream face reveal\\\", \\\"Error: Instagram vs. Reality filter failed\\\", \\\"Page not found (it's a TikTok POV)\\\", \\\"404: Link became a Twitter Blue checkmark\\\", \\\"This page is doing the Wednesday Addams dance\\\", \\\"Error: Reddit karma requirement not met\\\", \\\"Page got the Area 51 Raid treatment\\\", \\\"404: Certified 'It's Corn!' Moment \\ud83c\\udf3d\\\", \\\"This URL is now a Slenderman ARG\\\", \\\"Error: 2016 YouTube Rewind flashbacks\\\", \\\"Page not found (it's a Gacha Life OC)\\\", \\\"404: Link became a TikTok POV boyfriend\\\", \\\"This page is in its ASMR Mukbang era\\\", \\\"Error: Twitter (X) Community Notes violated\\\", \\\"Page got the 'Leonardo DiCaprio Oscar' treatment\\\", \\\"404: Certified 'I can fix him' Moment\\\", \\\"This URL is now a Roblox obby speedrun\\\", \\\"Error: Discord kitten voice chat overload\\\", \\\"Page not found (it's a Sssniperwolf reaction vid)\\\", \\\"404: Link became a Temu haul unboxing\\\", \\\"This page is doing the Silly Little Walk\\u2122\\\", \\\"Error: Reddit mod powertrip detected\\\", \\\"Page got the 'Girl Dinner' treatment \\ud83c\\udf77\\\", \\\"404: Certified 'Oh nah, I'd win' Moment\\\", \\\"This URL is now a Minecraft mob vote drama\\\", \\\"Error: Twitter (X) For You Page algorithm\\\", \\\"Page not found (it's a Kai Cenat 100 Thieves meme)\\\", \\\"404: Link became a MrBeast Burger review\\\", \\\"This page is in its BBL Era \\ud83d\\udc85\\\", \\\"Error: TikTok POV: You're Mid\\\", \\\"Page got the 'Barbieheimer' treatment\\\", \\\"404: Certified 'Is he acoustic?' Moment\\\", \\\"This URL is now a K-Pop fancam edit\\\", \\\"Error: Discord nitro simp detected\\\", \\\"Page not found (it's a Skibidi Toilet lore video)\\\", \\\"404: Link became a Twitter (X) Trending Topic\\\", \\\"This page is doing the 'It's giving...' walk\\\", \\\"Error: Reddit karma farming failed\\\", \\\"Page got the 'Girl Math' treatment \\ud83d\\udcb8\\\", \\\"404: Certified 'Let him cook' Moment\\\", \\\"This URL is now a Minecraft Dream SMP LARP\\\", \\\"Error: Twitter (X) Space host rizz failed\\\", \\\"Page not found (it's a Kai Cenat pizza meme)\\\", \\\"404: Link became a Temu version of itself\\\", \\\"This page is in its Girlboss Gaslight Gatekeep era\\\", \\\"Error: TikTok algorithm jail detected\\\", \\\"Page got the 'Live Laugh Love' treatment\\\", \\\"404: Certified 'I'm the drama' Moment\\\", \\\"This URL is now a Roblox Doors gameplay\\\", \\\"Error: Discord kitten egirl overload\\\", \\\"Page not found (it's a Kai Cenat gyatt compilation)\\\", \\\"404: Link became a Logan Paul CryptoZoo NFT\\\", \\\"This page is doing the Roman Empire walk \\ud83d\\udc82\\\", \\\"Error: Twitter (X) Verified checkmark scam\\\", \\\"Page got the 'Hot Girl Walk' treatment\\\", \\\"404: Certified 'It's the autism creature'\\\", \\\"This URL is now a Minecraft speedrun WR attempt\\\", \\\"Error: Reddit 'Am I the Asshole?' verdict: YTA\\\", \\\"Page not found (it's a Kai Cenat Adin Ross collab)\\\", ]; \" } ], \"backend\": [ { \"file\": \"C:\\\\Users\\\\mykal\\\\Documents\\\\F\\\\feelio.github.io\\\\backend\\\\index.js\", \"content\": \"import express from \\\"express\\\"; import mongoose from \\\"mongoose\\\"; import cors from \\\"cors\\\"; import dotenv from \\\"dotenv\\\"; import path from \\\"path\\\"; import { fileURLToPath } from \\\"url\\\"; import cloudinary from \\\"cloudinary\\\"; import rateLimit from \\\"express-rate-limit\\\"; dotenv.config(); const app = express(); const allowedOrigins = [ \\\"http: \\\"http: \\\"https: process.env.VITE_BACKEND_URL || \\\"https:]; app.use( cors({ origin: allowedOrigins, credentials: true, methods: [\\\"GET\\\", \\\"POST\\\", \\\"PUT\\\", \\\"DELETE\\\"], allowedHeaders: [\\\"Content-Type\\\", \\\"Authorization\\\"], }) ); app.use(express.json()); const limiter = rateLimit({ windowMs: 15 * 60 * 1000, max: 100, }); app.use(limiter); mongoose .connect(process.env.MONGO_URI) .then(() => console.log(\\\"Connected to MongoDB\\\")) .catch((err) => console.error(\\\"MongoDB Connection Error:\\\", err)); import userRoutes from \\\"./routes/userRoutes.js\\\"; import postRoutes from \\\"./routes/postRoutes.js\\\"; app.use(\\\"/api/users\\\", userRoutes); app.use(\\\"/api/posts\\\", postRoutes); const __dirname = path.dirname(fileURLToPath(import.meta.url)); app.use(express.static(path.join(__dirname, \\\"/dist\\\"))); app.get(\\\"*\\\", (req, res) => { res.sendFile(path.join(__dirname, \\\"/dist/index.html\\\")); }); app.get(\\\"/\\\", (req, res) => { res.send(\\\"Feelio API is running!\\\"); }); cloudinary.config({ cloud_name: process.env.CLOUDINARY_NAME, api_key: process.env.CLOUDINARY_KEY, api_secret: process.env.CLOUDINARY_SECRET, }); const PORT = process.env.PORT || 5000; app.listen(PORT, () => console.log(`Server running on port ${PORT}`)); \" }, { \"file\": \"C:\\\\Users\\\\mykal\\\\Documents\\\\F\\\\feelio.github.io\\\\backend\\\\package.json\", \"content\": \"{ \\\"name\\\": \\\"backend\\\", \\\"version\\\": \\\"1.0.0\\\", \\\"main\\\": \\\"index.js\\\", \\\"homepage\\\": \\\"https: \\\"scripts\\\": { \\\"test\\\": \\\"echo \\\\\\\"Error: no test specified\\\\\\\" && exit 1\\\", \\\"start\\\": \\\"node index.js\\\", \\\"deploy\\\": \\\"gh-pages -d dist\\\", \\\"build\\\": \\\"echo 'No build step for server'\\\", \\\"dev\\\": \\\"nodemon index.js\\\" }, \\\"keywords\\\": [], \\\"author\\\": \\\"\\\", \\\"license\\\": \\\"ISC\\\", \\\"description\\\": \\\"\\\", \\\"dependencies\\\": { \\\"bcrypt\\\": \\\"^5.1.1\\\", \\\"cloudinary\\\": \\\"^1.41.3\\\", \\\"cors\\\": \\\"^2.8.5\\\", \\\"dotenv\\\": \\\"^16.4.7\\\", \\\"express\\\": \\\"^4.21.2\\\", \\\"jsonwebtoken\\\": \\\"^9.0.2\\\", \\\"mongodb\\\": \\\"^6.12.0\\\", \\\"mongoose\\\": \\\"^8.9.5\\\", \\\"multer\\\": \\\"^1.4.5-lts.1\\\", \\\"multer-storage-cloudinary\\\": \\\"^4.0.0\\\" }, \\\"devDependencies\\\": { \\\"dotenv-webpack\\\": \\\"^8.1.0\\\", \\\"gh-pages\\\": \\\"^6.3.0\\\", \\\"webpack\\\": \\\"^5.98.0\\\", \\\"webpack-cli\\\": \\\"^6.0.1\\\", \\\"webpack-dev-server\\\": \\\"^5.2.0\\\" } } \" }, { \"file\": \"C:\\\\Users\\\\mykal\\\\Documents\\\\F\\\\feelio.github.io\\\\backend\\\\models\\\\Post.js\", \"content\": \"const mongoose = require(\\\"mongoose\\\"); const postSchema = new mongoose.Schema( { title: { type: String, required: true }, content: { type: String, required: true }, user: { type: mongoose.Schema.Types.ObjectId, ref: \\\"User\\\" }, likes: [{ type: mongoose.Schema.Types.ObjectId, ref: \\\"User\\\" }], comments: [ { text: { type: String, required: true }, user: { type: mongoose.Schema.Types.ObjectId, ref: \\\"User\\\" }, createdAt: { type: Date, default: Date.now }, }, ], image: { public_id: String, url: String, }, }, { timestamps: true } ); module.exports = mongoose.model(\\\"Post\\\", postSchema); \" }, { \"file\": \"C:\\\\Users\\\\mykal\\\\Documents\\\\F\\\\feelio.github.io\\\\backend\\\\routes\\\\postRoutes.js\", \"content\": \"const multer = require(\\\"multer\\\"); const path = require(\\\"path\\\"); const fs = require(\\\"fs\\\"); const router = require(\\\"express\\\").Router(); const Post = require(\\\"../models/Post\\\"); const verifyToken = require(\\\"../middleware/verifyToken\\\"); const cloudinary = require(\\\"cloudinary\\\").v2; const { CloudinaryStorage } = require(\\\"multer-storage-cloudinary\\\"); cloudinary.config({ cloud_name: process.env.CLOUDINARY_NAME, api_key: process.env.CLOUDINARY_KEY, api_secret: process.env.CLOUDINARY_SECRET, }); const storage = new CloudinaryStorage({ cloudinary: cloudinary, params: { folder: \\\"feelio/posts\\\", allowed_formats: [\\\"jpg\\\", \\\"jpeg\\\", \\\"png\\\", \\\"webp\\\"], quality: \\\"auto:best\\\", transformation: [ { width: 1000, height: 1000, crop: \\\"limit\\\" }, { fetch_format: \\\"auto\\\" }, ], use_filename: true, unique_filename: false, overwrite: true, }, }); const fileFilter = (req, file, cb) => { if ( [\\\"image/jpeg\\\", \\\"image/png\\\", \\\"image/jpg\\\", \\\"image/webp\\\"].includes( file.mimetype ) ) { cb(null, true); } else { cb( new Error(\\\"Invalid file type. Only JPEG, PNG, and JPG are allowed.\\\"), false ); } }; const upload = multer({ storage, fileFilter }); router.post(\\\"/\\\", verifyToken, upload.single(\\\"image\\\"), async (req, res) => { try { console.log(\\\"Uploaded file:\\\", req.file); const { title, content } = req.body; const newPost = new Post({ title, content, user: req.user.id, }); if (req.file) { newPost.image = { public_id: req.file.public_id, url: req.file.secure_url, }; } const savedPost = await newPost.save(); res.status(201).json(savedPost); } catch (err) { console.error(\\\"Error creating post:\\\", err); res.status(500).json({ message: \\\"Server Error\\\" }); } }); router.get(\\\"/\\\", async (req, res) => { try { const page = parseInt(req.query.page) || 1; const limit = parseInt(req.query.limit) || 5; const skip = (page - 1) * limit; const posts = await Post.find() .sort({ createdAt: -1 }) .skip(skip) .limit(limit) .populate(\\\"user\\\", [\\\"username\\\"]) .populate(\\\"likes\\\", [\\\"username\\\"]) .populate(\\\"comments.user\\\", [\\\"username\\\"]); const totalPosts = await Post.countDocuments(); const hasMore = totalPosts > skip + limit; res.status(200).json({ posts, hasMore, totalPosts, currentPage: page, totalPages: Math.ceil(totalPosts / limit), }); } catch (err) { res.status(500).json({ message: \\\"Server Error\\\" }); } }); router.get(\\\"/:id\\\", async (req, res) => { try { const post = await Post.findById(req.params.id) .populate(\\\"user\\\", [\\\"username\\\"]) .populate(\\\"likes\\\", [\\\"username\\\"]) .populate(\\\"comments.user\\\", [\\\"username\\\"]) .lean(); if (!post) return res.status(404).json(\\\"Post not found\\\"); post.comments = post.comments.sort((a, b) => b.createdAt - a.createdAt); res.status(200).json(post); } catch (err) { res.status(500).json({ message: \\\"Server Error\\\" }); } }); router.put(\\\"/:id/like\\\", verifyToken, async (req, res) => { try { const post = await Post.findById(req.params.id); if (!post) return res.status(404).json({ message: \\\"Post not found\\\" }); const userId = req.user.id; if (post.likes.includes(userId)) { post.likes = post.likes.filter((id) => id.toString() !== userId); } else { post.likes.push(userId); } const updatedPost = await post.save(); const populatedPost = await Post.findById(updatedPost._id) .populate(\\\"user\\\", [\\\"username\\\"]) .populate(\\\"likes\\\", [\\\"username\\\"]); res.json(populatedPost); } catch (error) { console.error(error); res.status(500).json({ message: \\\"Server Error\\\" }); } }); router.post(\\\"/:id/comment\\\", verifyToken, async (req, res) => { try { if (!req.body.text || req.body.text.trim() === \\\"\\\") { return res.status(400).json(\\\"Comment text is required\\\"); } const post = await Post.findById(req.params.id); if (!post) return res.status(404).json(\\\"Post not found\\\"); const newComment = { text: req.body.text, user: req.user.id, createdAt: new Date(), }; post.comments.push(newComment); await post.save(); const updatedPost = await Post.findById(req.params.id) .populate(\\\"user\\\", [\\\"username\\\"]) .populate(\\\"likes\\\", [\\\"username\\\"]) .populate(\\\"comments.user\\\", [\\\"username\\\"]); res.status(200).json(updatedPost); } catch (err) { res.status(500).json({ message: \\\"Server Error\\\" }); } }); module.exports = router; \" }, { \"file\": \"C:\\\\Users\\\\mykal\\\\Documents\\\\F\\\\feelio.github.io\\\\backend\\\\utils\\\\imageUpload.js\", \"content\": \"const multer = require(\\\"multer\\\"); const sharp = require(\\\"sharp\\\"); const AppError = require(\\\"./appError\\\"); const multerStorage = multer.memoryStorage(); const multerFilter = (req, file, cb) => { file.mimetype.startsWith(\\\"image\\\") ? cb(null, true) : cb(new AppError(\\\"Not an image! Please upload only images.\\\", 400), false); }; const upload = multer({ storage: multerStorage, fileFilter: multerFilter }); exports.uploadUserPhoto = upload.single(\\\"avatar\\\"); exports.uploadPostImage = upload.single(\\\"image\\\"); exports.resizeUserPhoto = catchAsync(async (req, res, next) => { if (!req.file) return next(); req.file.filename = `user-${req.user.id}-${Date.now()}.jpeg`; await sharp(req.file.buffer) .resize(500, 500) .toFormat(\\\"jpeg\\\") .jpeg({ quality: 90 }) .toFile(`public/img/users/${req.file.filename}`); next(); }); exports.resizePostImage = catchAsync(async (req, res, next) => { if (!req.file) return next(); req.file.filename = `post-${Date.now()}.jpeg`; await sharp(req.file.buffer) .resize(1200, 800) .toFormat(\\\"jpeg\\\") .jpeg({ quality: 90 }) .toFile(`public/img/posts/${req.file.filename}`); next(); }); \" }, { \"file\": \"C:\\\\Users\\\\mykal\\\\Documents\\\\F\\\\feelio.github.io\\\\backend\\\\utils\\\\logger.js\", \"content\": \"const winston = require(\\\"winston\\\"); const { combine, timestamp, json, errors } = winston.format; const logger = winston.createLogger({ level: \\\"info\\\", format: combine(errors({ stack: true }), timestamp(), json()), transports: [ new winston.transports.Console(), new winston.transports.File({ filename: \\\"logs/error.log\\\", level: \\\"error\\\" }), new winston.transports.File({ filename: \\\"logs/combined.log\\\" }), ], exceptionHandlers: [ new winston.transports.File({ filename: \\\"logs/exceptions.log\\\" }), ], rejectionHandlers: [ new winston.transports.File({ filename: \\\"logs/rejections.log\\\" }), ], }); if (process.env.NODE_ENV !== \\\"production\\\") { logger.add( new winston.transports.Console({ format: winston.format.simple(), }) ); } module.exports = logger; \" } ], \"frontend\": [ { \"file\": \"C:\\\\Users\\\\mykal\\\\Documents\\\\F\\\\feelio.github.io\\\\src\\\\api\\\\posts.js\", \"content\": \"import API from \\\"./index\\\"; export const getPosts = async (page = 1, limit = 5) => { try { const response = await API.get(`/posts?page=${page}&limit=${limit}`); console.log(\\\"Posts API Response:\\\", response); return response.data; } catch (error) { console.error(\\\"API Error Details:\\\", { status: error.response?.status, data: error.response?.data, config: error.config, }); throw new Error(error.response?.data?.message || \\\"Failed to fetch posts\\\"); } }; export const createPost = async (postData) => { try { const formData = new FormData(); formData.append(\\\"title\\\", postData.title); formData.append(\\\"content\\\", postData.content); const isFormData = postData.image instanceof File; if (isFormData) { formData.append(\\\"image\\\", postData.image); } const response = await API.post( \\\"/posts\\\", isFormData ? formData : postData, { headers: { \\\"Content-Type\\\": isFormData ? \\\"multipart/form-data\\\" : \\\"application/json\\\", }, } ); return response.data; } catch (error) { console.error(\\\"Error creating post:\\\", error); throw error; } }; export const likePost = async (postId) => { try { const response = await API.put(`/posts/${postId}/like`); return response.data; } catch (error) { console.error(\\\"Error liking post:\\\", error.response?.data || error.message); throw error; } }; export const addComment = async (postId, commentText) => { try { const response = await API.post(`/posts/${postId}/comment`, { text: commentText, }); return response.data; } catch (error) { console.error(\\\"Error adding comment:\\\", error); throw error; } }; export const getSinglePost = async (postId) => { try { const response = await API.get(`/posts/${postId}`); return response.data; } catch (error) { console.error(\\\"Error fetching single post:\\\", error); throw error; } }; \" }, { \"file\": \"C:\\\\Users\\\\mykal\\\\Documents\\\\F\\\\feelio.github.io\\\\src\\\\Components\\\\AvatarUpload.jsx\", \"content\": \" import React, { useState } from \\\"react\\\"; import { useMutation } from \\\"@tanstack/react-query\\\"; import { updateProfile } from \\\"../api/users\\\"; import { useAuth } from \\\"../context/AuthContext\\\"; const AvatarUpload = () => { const { user, updateUser } = useAuth(); const [preview, setPreview] = useState(user?.avatar); const { mutate } = useMutation(updateProfile, { onSuccess: (data) => { updateUser(data.user); setPreview(data.user.avatar); }, }); const handleChange = async (e) => { const file = e.target.files[0]; if (!file) return; const reader = new FileReader(); reader.onload = () => setPreview(reader.result); reader.readAsDataURL(file); const formData = new FormData(); formData.append(\\\"avatar\\\", file); mutate(formData); }; return ( <div className=\\\"avatar-upload\\\"> <label> <input type=\\\"file\\\" accept=\\\"image/*\\\" onChange={handleChange} hidden /> <img src={preview || \\\"/default-avatar.png\\\"} alt=\\\"Avatar\\\" className=\\\"w-32 h-32 rounded-full cursor-pointer\\\" /> </label> </div> ); }; export default AvatarUpload; \" }, { \"file\": \"C:\\\\Users\\\\mykal\\\\Documents\\\\F\\\\feelio.github.io\\\\src\\\\Components\\\\ImageUploader.jsx\", \"content\": \"import React, { useCallback } from \\\"react\\\"; import { useDropzone } from \\\"react-dropzone\\\"; import { XMarkIcon } from \\\"@heroicons/react/24/outline\\\"; const ImageUploader = ({ image, setImage }) => { const onDrop = useCallback( (acceptedFiles) => { const file = acceptedFiles[0]; if (file) { const reader = new FileReader(); reader.onload = () => setImage(reader.result); reader.readAsDataURL(file); } }, [setImage] ); const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop, accept: { \\\"image/*\\\": [\\\".jpeg\\\", \\\".jpg\\\", \\\".png\\\", \\\".webp\\\"] }, maxFiles: 1, }); return ( <div className=\\\"space-y-4\\\"> {image ? ( <div className=\\\"relative group\\\"> <img src={image} alt=\\\"Preview\\\" className=\\\"rounded-lg w-full h-64 object-cover\\\" /> <button onClick={() => setImage(null)} className=\\\"absolute top-2 right-2 p-1 bg-gray-800/50 rounded-full hover:bg-gray-800 transition-colors\\\" aria-label=\\\"Remove image\\\" > <XMarkIcon className=\\\"w-6 h-6 text-white\\\" /> </button> </div> ) : ( <div {...getRootProps()} className={`border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-colors ${ isDragActive ? \\\"border-blue-500 bg-blue-50 dark:bg-blue-900/20\\\" : \\\"border-gray-300 dark:border-gray-600 hover:border-gray-400\\\" }`} > <input {...getInputProps()} /> <p className=\\\"text-gray-500 dark:text-gray-400\\\"> {isDragActive ? \\\"Drop image here\\\" : \\\"Drag image or click to upload\\\"} </p> <p className=\\\"text-sm text-gray-400 mt-2\\\"> Recommended size: 1200x800 pixels </p> </div> )} </div> ); }; export default ImageUploader; \" }, { \"file\": \"C:\\\\Users\\\\mykal\\\\Documents\\\\F\\\\feelio.github.io\\\\src\\\\Components\\\\PostCard.jsx\", \"content\": \"import React, { useState } from \\\"react\\\"; import { HeartIcon, ChatBubbleOvalLeftIcon, XMarkIcon, ArrowsPointingOutIcon, } from \\\"@heroicons/react/24/outline\\\"; import { HeartIcon as HeartIconSolid } from \\\"@heroicons/react/24/solid\\\"; import moment from \\\"moment\\\"; import { addComment } from \\\"../api\\\"; import { motion, AnimatePresence } from \\\"framer-motion\\\"; const PostCard = ({ _id, title, content, author, image: postImage, likes = [], comments: initialComments = [], createdAt, onCommentAdded, onLike, currentUserId, }) => { const [showComments, setShowComments] = useState(false); const [newComment, setNewComment] = useState(\\\"\\\"); const [isSubmitting, setIsSubmitting] = useState(false); const [comments, setComments] = useState(initialComments); const [isContentExpanded, setIsContentExpanded] = useState(false); const [expandedComments, setExpandedComments] = useState({}); const [commentsScrollTop, setCommentsScrollTop] = useState(0); const [showImageModal, setShowImageModal] = useState(false); const userLiked = likes.some( (like) => (like._id?.toString() || like.toString()) === currentUserId?.toString() ); const handleCommentSubmit = async (e) => { e.preventDefault(); if (!newComment.trim() || isSubmitting) return; setIsSubmitting(true); try { const updatedPost = await addComment(_id, newComment); setComments(updatedPost.comments); setNewComment(\\\"\\\"); onCommentAdded(updatedPost); } catch (err) { console.error(\\\"Error adding comment:\\\", err); } finally { setIsSubmitting(false); } }; const handleCommentsScroll = (e) => { setCommentsScrollTop(e.target.scrollTop); }; const handleLike = async () => { try { await onLike(_id); } catch (err) { console.error(\\\"Error liking post:\\\", err); } }; const toggleContent = () => setIsContentExpanded(!isContentExpanded); const toggleComment = (commentId) => { setExpandedComments((prev) => ({ ...prev, [commentId]: !prev[commentId], })); }; const handleImageClick = () => { setShowImageModal(true); }; return ( <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} className=\\\"p-6 bg-gray-900/80 backdrop-blur-md rounded-2xl border border-gray-800/50 shadow-lg hover:shadow-xl transition-all relative group\\\" > {} <div className=\\\"flex items-center justify-between mb-4\\\"> <div className=\\\"flex items-center gap-3\\\"> <motion.div whileHover={{ scale: 1.05 }} className=\\\"relative bg-gradient-to-r from-purple-600 to-blue-600 p-0.5 rounded-full\\\" > <div className=\\\"w-8 h-8 bg-gray-900 rounded-full flex items-center justify-center\\\"> <span className=\\\"bg-gradient-to-r from-purple-300 to-blue-300 bg-clip-text text-transparent font-medium\\\"> {author?.charAt(0).toUpperCase() || \\\"U\\\"} </span> </div> </motion.div> <div> <p className=\\\"font-medium bg-gradient-to-r from-purple-300 to-blue-300 bg-clip-text text-transparent\\\"> {author} </p> <p className=\\\"text-sm text-gray-400\\\"> {moment(createdAt).fromNow()} </p> </div> </div> </div> {} {postImage ? ( <motion.div className=\\\"mb-4 rounded-lg overflow-hidden border border-gray-800/50 relative\\\" whileHover={{ scale: 1.02 }} > <button onClick={handleImageClick} className=\\\"w-full h-full block relative group\\\" > <img src={ postImage.url || `https: import.meta.env.VITE_CLOUDINARY_NAME }/image/upload/${postImage.public_id}` } alt=\\\"Post content\\\" className=\\\"w-full h-auto max-h-[600px] object-cover cursor-pointer\\\" loading=\\\"lazy\\\" style={{ aspectRatio: \\\"1 / 1\\\" }} /> <div className=\\\"absolute inset-0 bg-gradient-to-t from-black/40 to-transparent opacity-0 group-hover:opacity-100 transition-opacity\\\" /> <ArrowsPointingOutIcon className=\\\"absolute top-2 right-2 h-6 w-6 text-white opacity-0 group-hover:opacity-75 transition-opacity\\\" /> </button> </motion.div> ) : ( <div className=\\\"mb-4 p-4 bg-gray-800/50 rounded-lg text-gray-400\\\"> No image available </div> )} {} <AnimatePresence> {showImageModal && ( <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }} className=\\\"fixed inset-0 z-50 bg-black/90 backdrop-blur-xl rounded-2xl flex items-center justify-center p-4\\\" onClick={() => setShowImageModal(false)} > <motion.div className=\\\"relative max-w-full max-h-full rounded-2xl overflow-hidden\\\" initial={{ scale: 0.95 }} animate={{ scale: 1 }} exit={{ scale: 0.95 }} onClick={(e) => e.stopPropagation()} > <img src={ postImage.url || `https: } alt=\\\"Post content\\\" className=\\\"max-w-full max-h-[90vh] object-contain rounded-2xl\\\" /> <button className=\\\"absolute top-4 right-4 p-2 bg-gray-900/80 backdrop-blur-lg rounded-full border border-gray-800/60 hover:border-purple-500/50 transition-all group\\\" onClick={() => setShowImageModal(false)} > <XMarkIcon className=\\\"h-6 w-6 text-gray-400 group-hover:text-purple-400\\\" /> </button> </motion.div> </motion.div> )} </AnimatePresence> {} <div className=\\\"space-y-4\\\"> <h2 className=\\\"text-xl font-bold bg-gradient-to-r from-purple-200 to-blue-200 bg-clip-text text-transparent\\\"> {title} </h2> <div className=\\\"relative\\\"> <AnimatePresence initial={false}> <motion.div key={isContentExpanded ? \\\"expanded\\\" : \\\"collapsed\\\"} initial={{ height: 0, opacity: 0 }} animate={{ height: \\\"auto\\\", opacity: 1 }} exit={{ height: 0, opacity: 0 }} transition={{ duration: 0.3, ease: \\\"easeInOut\\\" }} className=\\\"overflow-hidden\\\" > <p className=\\\"text-gray-300\\\"> {isContentExpanded ? content : `${content.slice(0, 150)}...`} </p> </motion.div> </AnimatePresence> {content.length > 150 && !isContentExpanded && ( <button onClick={toggleContent} className=\\\"text-purple-400 hover:text-purple-300 text-sm font-medium mt-1\\\" > Show more </button> )} </div> </div> {} <div className=\\\"flex items-center gap-4 mt-4\\\"> <motion.button whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }} onClick={handleLike} className=\\\"flex items-center gap-1\\\" > {userLiked ? ( <HeartIconSolid className=\\\"h-6 w-6 text-red-400\\\" /> ) : ( <HeartIcon className=\\\"h-6 w-6 text-gray-400 hover:text-red-400\\\" /> )} <span className={`${userLiked ? \\\"text-red-400\\\" : \\\"text-gray-400\\\"}`}> {likes.length} </span> </motion.button> <motion.button whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }} onClick={() => setShowComments(!showComments)} className=\\\"flex items-center gap-1\\\" > <ChatBubbleOvalLeftIcon className=\\\"h-6 w-6 text-gray-400 hover:text-blue-400\\\" /> <span className=\\\"text-gray-400\\\">{comments.length}</span> </motion.button> </div> {} <AnimatePresence> {showComments && ( <motion.div initial={{ opacity: 0, height: 0 }} animate={{ opacity: 1, height: \\\"auto\\\" }} exit={{ opacity: 0, height: 0 }} className=\\\"mt-4 pt-4 border-t border-gray-800/40 relative\\\" > {} <motion.button initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: Math.min(commentsScrollTop, 100), transition: { type: \\\"spring\\\", stiffness: 300 }, }} exit={{ opacity: 0 }} className=\\\"fixed md:absolute right-8 top-24 md:right-4 md:-top-4 z-50 p-2 bg-gray-900/80 backdrop-blur-lg rounded-full border border-gray-800/60 hover:border-purple-500/50 transition-all group\\\" onClick={() => setShowComments(false)} > <XMarkIcon className=\\\"h-6 w-6 text-gray-400 group-hover:text-purple-400\\\" /> </motion.button> {} <form onSubmit={handleCommentSubmit} className=\\\"mb-4\\\"> <motion.div whileFocus={{ scale: 1.02 }} className=\\\"relative\\\"> <input type=\\\"text\\\" value={newComment} onChange={(e) => setNewComment(e.target.value)} placeholder=\\\"Add a comment...\\\" className=\\\"w-full px-4 py-2 rounded-lg bg-gray-900/50 border border-gray-800/60 focus:ring-2 focus:ring-purple-500 focus:border-transparent text-gray-200 placeholder-gray-500\\\" disabled={isSubmitting} /> </motion.div> <motion.button whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }} type=\\\"submit\\\" className=\\\"mt-2 px-4 py-2 text-sm bg-gradient-to-r from-purple-600 to-blue-600 text-white rounded-lg hover:shadow-lg transition-all relative overflow-hidden group\\\" disabled={isSubmitting} > <span className=\\\"relative z-10\\\"> {isSubmitting ? \\\"Posting...\\\" : \\\"Post Comment\\\"} </span> <div className=\\\"absolute inset-0 bg-gradient-to-r from-white/15 to-transparent opacity-0 group-hover:opacity-100 transition-opacity\\\" /> </motion.button> </form> {} <div className=\\\"space-y-4 max-h-[500px] overflow-y-auto scrollbar-thin scrollbar-thumb-gray-800 scrollbar-track-transparent\\\" onScroll={handleCommentsScroll} > {comments .slice() .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt)) .map((comment) => ( <motion.div key={comment._id} initial={{ opacity: 0 }} animate={{ opacity: 1 }} className=\\\"p-3 bg-gray-900/50 rounded-lg border border-gray-800/40\\\" > <div className=\\\"flex items-start gap-3\\\"> <div className=\\\"w-6 h-6 bg-gradient-to-r from-purple-600 to-blue-600 rounded-full flex items-center justify-center text-xs text-white\\\"> {comment.user?.username?.charAt(0).toUpperCase() || \\\"U\\\"} </div> <div className=\\\"flex-1\\\"> <div className=\\\"space-y-1\\\"> <span className=\\\"text-sm font-medium bg-gradient-to-r from-purple-300 to-blue-300 bg-clip-text text-transparent\\\"> {comment.user?.username || \\\"Unknown\\\"} </span> <AnimatePresence initial={false}> <motion.div key={ expandedComments[comment._id] ? \\\"expanded\\\" : \\\"collapsed\\\" } initial={{ height: 0, opacity: 0 }} animate={{ height: \\\"auto\\\", opacity: 1 }} exit={{ height: 0, opacity: 0 }} transition={{ duration: 0.3, ease: \\\"easeInOut\\\" }} className=\\\"overflow-hidden\\\" > <p className=\\\"text-gray-300\\\"> {expandedComments[comment._id] ? comment.text : `${comment.text.slice(0, 150)}...`} </p> </motion.div> </AnimatePresence> {comment.text.length > 150 && ( <button onClick={() => toggleComment(comment._id)} className=\\\"text-purple-400 hover:text-purple-300 text-sm font-medium mt-1\\\" > {expandedComments[comment._id] ? \\\"Show less\\\" : \\\"Show more\\\"} </button> )} </div> <p className=\\\"text-xs text-gray-500 mt-1\\\"> {moment(comment.createdAt).fromNow()} </p> </div> </div> </motion.div> ))} </div> </motion.div> )} </AnimatePresence> </motion.div> ); }; export default PostCard; \" }, { \"file\": \"C:\\\\Users\\\\mykal\\\\Documents\\\\F\\\\feelio.github.io\\\\src\\\\Components\\\\PostDetail.jsx\", \"content\": \"import React, { useEffect, useState } from \\\"react\\\"; import { useParams, useNavigate } from \\\"react-router-dom\\\"; import { getSinglePost, likePost, addComment } from \\\"../api\\\"; import { fetchUserData } from \\\"../api\\\"; import { HeartIcon, ChatBubbleOvalLeftIcon, ArrowLeftIcon, } from \\\"@heroicons/react/24/outline\\\"; import { HeartIcon as HeartIconSolid } from \\\"@heroicons/react/24/solid\\\"; import moment from \\\"moment\\\"; const PostDetail = () => { const { id } = useParams(); const navigate = useNavigate(); const [post, setPost] = useState(null); const [loading, setLoading] = useState(true); const [error, setError] = useState(\\\"\\\"); const [commentText, setCommentText] = useState(\\\"\\\"); const [userLiked, setUserLiked] = useState(false); const [currentUser, setCurrentUser] = useState(null); const [isCommenting, setIsCommenting] = useState(false); useEffect(() => { const fetchCurrentUser = async () => { try { const user = await fetchUserData(); setCurrentUser(user); } catch (err) { console.error(\\\"Error fetching user data:\\\", err); } }; fetchCurrentUser(); }, []); useEffect(() => { const fetchPost = async () => { try { const response = await getSinglePost(id); console.log(\\\"Fetched post:\\\", response); setPost(response); if (currentUser) { const isLiked = response.likes.some( (like) => like._id === currentUser._id ); setUserLiked(isLiked); } setError(\\\"\\\"); } catch (err) { setError(\\\"Failed to load post\\\"); console.error(\\\"Error fetching post:\\\", err); } finally { setLoading(false); } }; if (currentUser) { fetchPost(); } }, [id, currentUser]); const handleLike = async () => { try { const updatedPost = await likePost(id); setPost(updatedPost); if (currentUser) { const isLiked = updatedPost.likes.some( (like) => like._id === currentUser._id ); setUserLiked(isLiked); } } catch (err) { console.error(\\\"Error liking post:\\\", err); } }; const handleCommentSubmit = async (e) => { e.preventDefault(); if (!commentText.trim()) return; setIsCommenting(true); try { const updatedPost = await addComment(id, commentText); setPost(updatedPost); setCommentText(\\\"\\\"); } catch (err) { console.error(\\\"Error adding comment:\\\", err); } finally { setIsCommenting(false); } }; if (loading) return ( <div className=\\\"flex justify-center items-center h-screen\\\"> Loading post... </div> ); if (error) return <div className=\\\"text-red-500 text-center p-8\\\">{error}</div>; if (!post) return <div className=\\\"text-center p-8\\\">Post not found</div>; return ( <div className=\\\"fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center p-4\\\"> <div className=\\\"bg-white dark:bg-gray-900 rounded-lg shadow-lg w-full max-w-2xl max-h-[90vh] overflow-y-auto\\\"> {} <div className=\\\"p-4 border-b dark:border-gray-700 flex items-center\\\"> <button onClick={() => navigate(-1)} className=\\\"p-2 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-full\\\" > <ArrowLeftIcon className=\\\"h-6 w-6 text-gray-700 dark:text-gray-300\\\" /> </button> <h2 className=\\\"text-xl font-bold ml-2 dark:text-white\\\">Post</h2> </div> {} <div className=\\\"p-6\\\"> <div className=\\\"flex items-center mb-4\\\"> <div className=\\\"w-10 h-10 bg-gray-200 rounded-full flex items-center justify-center\\\"> <span className=\\\"text-gray-700 dark:text-gray-300\\\"> {post.user?.username?.charAt(0).toUpperCase() || \\\"U\\\"} </span> </div> <div className=\\\"ml-3\\\"> <h3 className=\\\"font-semibold dark:text-white\\\"> {post.user?.username || \\\"Unknown author\\\"} </h3> <p className=\\\"text-sm text-gray-500 dark:text-gray-400\\\"> {moment(post.createdAt).fromNow()} </p> </div> </div> <p className=\\\"text-gray-800 dark:text-gray-200 mb-6\\\"> {post.content} </p> {} <div className=\\\"flex items-center space-x-4 mb-6\\\"> <button onClick={handleLike} className=\\\"flex items-center text-gray-600 dark:text-gray-400 hover:text-red-500\\\" > {userLiked ? ( <HeartIconSolid className=\\\"h-6 w-6 text-red-500\\\" /> ) : ( <HeartIcon className=\\\"h-6 w-6\\\" /> )} <span className=\\\"ml-1\\\">{post.likes?.length || 0}</span> </button> <button className=\\\"flex items-center text-gray-600 dark:text-gray-400 hover:text-blue-500\\\"> <ChatBubbleOvalLeftIcon className=\\\"h-6 w-6\\\" /> <span className=\\\"ml-1\\\">{post.comments?.length || 0}</span> </button> </div> {} <div className=\\\"mt-6\\\"> <h3 className=\\\"text-lg font-semibold mb-4 dark:text-white\\\"> Comments </h3> <form onSubmit={handleCommentSubmit} className=\\\"mb-6\\\"> <textarea value={commentText} onChange={(e) => setCommentText(e.target.value)} placeholder=\\\"Add a comment...\\\" className=\\\"w-full p-2 border border-gray-300 dark:border-gray-700 rounded-lg mb-2 dark:bg-gray-800 dark:text-white\\\" rows=\\\"3\\\" /> <button type=\\\"submit\\\" disabled={isCommenting} className=\\\"bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 disabled:opacity-50\\\" > {isCommenting ? \\\"Submitting...\\\" : \\\"Submit Comment\\\"} </button> </form> {post.comments?.map((comment, index) => ( <div key={index} className=\\\"mb-4\\\"> <div className=\\\"flex items-center\\\"> <div className=\\\"w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center\\\"> <span className=\\\"text-gray-700 dark:text-gray-300\\\"> {comment.user?.username?.charAt(0).toUpperCase() || \\\"U\\\"} </span> </div> <div className=\\\"ml-3\\\"> <span className=\\\"font-medium dark:text-white\\\"> {comment.user?.username || \\\"Unknown user\\\"} </span> <span className=\\\"ml-2 text-gray-600 dark:text-gray-400\\\"> {comment.text} </span> </div> </div> <p className=\\\"text-xs text-gray-500 dark:text-gray-400 ml-11\\\"> {moment(comment.createdAt).fromNow()} </p> </div> ))} </div> </div> </div> </div> ); }; export default PostDetail; \" }, { \"file\": \"C:\\\\Users\\\\mykal\\\\Documents\\\\F\\\\feelio.github.io\\\\src\\\\Components\\\\PostEditor.jsx\", \"content\": \"import React, { useState } from \\\"react\\\"; import ReactQuill from \\\"react-quill\\\"; import { useCreatePost } from \\\"../hooks/usePosts\\\"; import ImageUploader from \\\"./ImageUploader\\\"; import Modal from \\\"./Modal\\\"; const PostEditor = ({ isOpen, onClose }) => { const [content, setContent] = useState(\\\"\\\"); const [title, setTitle] = useState(\\\"\\\"); const [tags, setTags] = useState(\\\"\\\"); const [image, setImage] = useState(null); const { mutate: createPost } = useCreatePost(); const handleSubmit = () => { createPost({ title, content, tags: tags.split(\\\",\\\"), image }); onClose(); }; return ( <Modal isOpen={isOpen} onClose={onClose} title=\\\"Create Post\\\"> <div className=\\\"space-y-4\\\"> <input type=\\\"text\\\" placeholder=\\\"Post Title\\\" value={title} onChange={(e) => setTitle(e.target.value)} className=\\\"w-full p-2 border rounded-lg dark:bg-gray-800 dark:border-gray-700\\\" /> <ImageUploader image={image} setImage={setImage} /> <ReactQuill theme=\\\"snow\\\" value={content} onChange={setContent} modules={{ toolbar: [ [\\\"bold\\\", \\\"italic\\\", \\\"underline\\\"], [\\\"blockquote\\\", \\\"code-block\\\"], [{ header: 1 }, { header: 2 }], [{ list: \\\"ordered\\\" }, { list: \\\"bullet\\\" }], [\\\"link\\\", \\\"image\\\"], [\\\"clean\\\"], ], }} className=\\\"h-48 mb-4 dark:text-white\\\" /> <button onClick={handleSubmit} className=\\\"w-full bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700 transition-colors\\\" > Publish </button> </div> </Modal> ); }; export default PostEditor; \" }, { \"file\": \"C:\\\\Users\\\\mykal\\\\Documents\\\\F\\\\feelio.github.io\\\\src\\\\Components\\\\PostFeed.jsx\", \"content\": \"import React from \\\"react\\\"; import { useQuery, useQueryClient } from \\\"@tanstack/react-query\\\"; import PostCard from \\\"./PostCard\\\"; import SkeletonLoader from \\\"./SkeletonLoader\\\"; import { getPosts } from \\\"../api/posts\\\"; import useSocket from \\\"../hooks/useSocket\\\"; import { useAuth } from \\\"../context/AuthContext\\\"; const PostFeed = () => { const queryClient = useQueryClient(); const { user } = useAuth(); const { data: posts, isLoading, error, } = useQuery({ queryKey: [\\\"posts\\\"], queryFn: getPosts, }); useSocket({ likeUpdate: (data) => { queryClient.setQueryData([\\\"posts\\\"], (oldPosts) => { return oldPosts.map((post) => { if (post._id === data.postId) { return { ...post, likes: data.likes, likeCount: data.likes.length, isLiked: data.likes.includes(user?._id), }; } return post; }); }); }, newComment: (commentData) => { queryClient.setQueryData([\\\"posts\\\"], (oldPosts) => { return oldPosts.map((post) => { if (post._id === commentData.postId) { return { ...post, comments: [commentData, ...post.comments], commentCount: post.commentCount + 1, }; } return post; }); }); }, }); if (isLoading) return <SkeletonLoader count={3} />; if (error) return <div>Error loading posts</div>; return ( <div className=\\\"space-y-6\\\"> {posts?.map((post) => ( <PostCard key={post._id} post={{ ...post, isLiked: post.likes.includes(user?._id), likeCount: post.likes.length, commentCount: post.comments.length, }} /> ))} </div> ); }; export default PostFeed; \" }, { \"file\": \"C:\\\\Users\\\\mykal\\\\Documents\\\\F\\\\feelio.github.io\\\\src\\\\Components\\\\SkeletonLoader.jsx\", \"content\": \"import React from \\\"react\\\"; const SkeletonLoader = ({ count = 1 }) => { return ( <> {[...Array(count)].map((_, i) => ( <div key={i} className=\\\"w-full max-w-2xl mx-auto p-4 space-y-4 animate-pulse\\\" > {} <div className=\\\"flex items-center space-x-4\\\"> {} <div className=\\\"h-10 w-10 bg-gray-800 rounded-full\\\"></div> {} <div className=\\\"flex-1 space-y-2\\\"> <div className=\\\"h-4 bg-gray-800 rounded w-3/4\\\"></div> <div className=\\\"h-3 bg-gray-800 rounded w-1/2\\\"></div> </div> </div> {} <div className=\\\"space-y-3\\\"> <div className=\\\"h-4 bg-gray-800 rounded w-full\\\"></div> <div className=\\\"h-4 bg-gray-800 rounded w-5/6\\\"></div> <div className=\\\"h-4 bg-gray-800 rounded w-4/6\\\"></div> </div> {} <div className=\\\"h-48 bg-gray-800 rounded-lg\\\"></div> {} <div className=\\\"flex items-center space-x-6\\\"> <div className=\\\"h-6 w-6 bg-gray-800 rounded-full\\\"></div> <div className=\\\"h-6 w-6 bg-gray-800 rounded-full\\\"></div> <div className=\\\"h-6 w-6 bg-gray-800 rounded-full\\\"></div> </div> </div> ))} </> ); }; export default SkeletonLoader; \" }, { \"file\": \"C:\\\\Users\\\\mykal\\\\Documents\\\\F\\\\feelio.github.io\\\\src\\\\hooks\\\\usePosts.js\", \"content\": \"import { useMutation, useQueryClient } from \\\"@tanstack/react-query\\\"; import { createPost, likePost, addComment, deletePost } from \\\"../api/posts\\\"; export const useCreatePost = () => { const queryClient = useQueryClient(); return useMutation(createPost, { onSuccess: () => { queryClient.invalidateQueries([\\\"posts\\\"]); }, onError: (error) => { console.error(\\\"Create post error:\\\", error); }, }); }; export const useLikePost = () => { const queryClient = useQueryClient(); return useMutation(likePost, { onMutate: async (postId) => { await queryClient.cancelQueries([\\\"posts\\\"]); const previousPosts = queryClient.getQueryData([\\\"posts\\\"]); queryClient.setQueryData([\\\"posts\\\"], (old) => old.map((post) => post._id === postId ? { ...post, likes: [...post.likes, \\\"temp\\\"], isLiked: true } : post ) ); return { previousPosts }; }, onError: (err, postId, context) => { queryClient.setQueryData([\\\"posts\\\"], context.previousPosts); }, onSettled: () => { queryClient.invalidateQueries([\\\"posts\\\"]); }, }); }; export const useAddComment = (postId) => { const queryClient = useQueryClient(); return useMutation((comment) => addComment(postId, comment), { onSuccess: () => { queryClient.invalidateQueries([\\\"post\\\", postId]); }, }); }; \" }, { \"file\": \"C:\\\\Users\\\\mykal\\\\Documents\\\\F\\\\feelio.github.io\\\\src\\\\pages\\\\Home.jsx\", \"content\": \"import React, { useEffect, useState, useCallback } from \\\"react\\\"; import { getPosts, createPost, likePost } from \\\"../api\\\"; import PostCard from \\\"../Components/PostCard\\\"; import { useSelector } from \\\"react-redux\\\"; import { SparklesIcon, ExclamationTriangleIcon, CameraIcon, } from \\\"@heroicons/react/24/outline\\\"; import { motion, AnimatePresence } from \\\"framer-motion\\\"; import SkeletonLoader from \\\"../Components/SkeletonLoader\\\"; import useInfiniteScroll from \\\"../hooks/useInfiniteScroll\\\"; const Home = () => { const [posts, setPosts] = useState([]); const [loading, setLoading] = useState(true); const [error, setError] = useState(null); const [title, setTitle] = useState(\\\"\\\"); const [content, setContent] = useState(\\\"\\\"); const [isCreating, setIsCreating] = useState(false); const { user } = useSelector((state) => state.user); const [image, setImage] = useState(null); const [imagePreview, setImagePreview] = useState(\\\"\\\"); const [hasMore, setHasMore] = useState(true); const [page, setPage] = useState(1); const TITLE_CHARACTER_LIMIT = 100; const handleLike = async (postId) => { try { const updatedPost = await likePost(postId); setPosts((prevPosts) => prevPosts.map((post) => post._id === updatedPost._id ? updatedPost : post ) ); } catch (err) { console.error(\\\"Error liking post:\\\", err); setError({ message: \\\"Failed to like post. Please try again.\\\", status: \\\"Error\\\", }); } }; const fetchPosts = useCallback(async () => { setLoading(true); setError(null); try { const response = await getPosts(page); console.log(\\\"API Response:\\\", response); const newPosts = response.posts || []; setPosts((prev) => (page === 1 ? newPosts : [...prev, ...newPosts])); setHasMore(response.hasMore); } catch (err) { console.error(\\\"Error fetching posts:\\\", err); setError({ message: err.message || \\\"Failed to fetch posts.\\\", status: err.response?.status || \\\"Network Error\\\", }); } finally { setLoading(false); } }, [page]); useEffect(() => { fetchPosts(); }, [fetchPosts]); const [lastPostRef] = useInfiniteScroll({ loading, hasMore, onLoadMore: () => setPage((prev) => prev + 1), }); const handleImageChange = (e) => { const file = e.target.files[0]; if (file) { setImage(file); setImagePreview(URL.createObjectURL(file)); } }; const handleSubmit = async (e) => { e.preventDefault(); setIsCreating(true); setError(null); try { if (title.length > TITLE_CHARACTER_LIMIT) { throw new Error( `Title cannot exceed ${TITLE_CHARACTER_LIMIT} characters.` ); } const response = await createPost({ title, content, image }); if (response && response._id) { setPosts((prev) => [response, ...prev]); setTitle(\\\"\\\"); setContent(\\\"\\\"); setImage(null); setImagePreview(\\\"\\\"); setPage(1); } else { throw new Error(\\\"Failed to create post: Invalid response\\\"); } } catch (err) { console.error(\\\"Error creating post:\\\", err); setError({ message: err.response?.data?.message || err.message || \\\"Server Error\\\", status: err.response?.status || 500, }); } finally { setIsCreating(false); } }; const ErrorMessage = ({ error }) => ( <motion.div initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0, y: -20 }} className=\\\"fixed top-2 left-2 right-2 sm:top-4 sm:right-4 sm:left-auto z-50\\\" > <div className=\\\"bg-gray-900/90 backdrop-blur-lg p-3 sm:p-4 rounded-lg sm:rounded-xl shadow-2xl border border-purple-500/20 flex items-start gap-2 sm:gap-3 max-w-md\\\"> <div className=\\\"bg-purple-500/10 p-1.5 sm:p-2 rounded-md\\\"> <ExclamationTriangleIcon className=\\\"h-5 w-5 sm:h-6 sm:w-6 text-purple-400\\\" /> </div> <div> <h3 className=\\\"text-sm sm:text-base font-medium bg-gradient-to-r from-purple-300 to-blue-300 bg-clip-text text-transparent\\\"> {error.status} Error </h3> <p className=\\\"text-xs sm:text-sm text-gray-300 mt-0.5\\\"> {error.message} </p> <button onClick={() => setError(null)} className=\\\"mt-1.5 text-xs sm:text-sm text-purple-400 hover:text-purple-300 transition-colors\\\" > Dismiss </button> </div> </div> </motion.div> ); return ( <div className=\\\"relative min-h-screen bg-gray-950 pb-16 sm:pb-0\\\"> <AnimatePresence> {error && <ErrorMessage error={error} />} </AnimatePresence> <div className=\\\"container mx-auto max-w-2xl px-2 sm:px-4 py-6 sm:py-8 pt-16 sm:pt-20\\\"> {} {loading && ( <motion.div className=\\\"text-center py-6\\\"> <p className=\\\"text-gray-400\\\">Loading new posts...</p> </motion.div> )} {} <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} className=\\\"mb-6 sm:mb-8 flex items-center justify-center gap-2 sm:gap-3\\\" > <motion.div whileHover={{ rotate: 15 }} className=\\\"bg-purple-600/20 p-2 sm:p-3 rounded-lg sm:rounded-xl\\\" > <SparklesIcon className=\\\"h-6 w-6 sm:h-8 sm:w-8 text-purple-400\\\" /> </motion.div> <h1 className=\\\"text-2xl sm:text-4xl font-bold bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent drop-shadow-[0_0_20px_rgba(129,140,248,0.3)]\\\"> Recent Posts </h1> </motion.div> {} <motion.div initial={{ opacity: 0, scale: 0.95 }} animate={{ opacity: 1, scale: 1 }} className=\\\"mb-6 sm:mb-8 p-3 sm:p-6 bg-gray-900/80 backdrop-blur-md rounded-xl sm:rounded-2xl border border-gray-800/50 shadow-lg hover:shadow-xl transition-all\\\" > <h2 className=\\\"text-lg sm:text-xl font-semibold mb-3 sm:mb-4 bg-gradient-to-r from-purple-300 to-blue-300 bg-clip-text text-transparent\\\"> Create a New Post </h2> <form onSubmit={handleSubmit} className=\\\"space-y-3 sm:space-y-4\\\"> {} <div className=\\\"relative\\\"> <motion.input whileFocus={{ scale: 1.02 }} type=\\\"text\\\" value={title} onChange={(e) => setTitle(e.target.value)} placeholder=\\\"Post title\\\" className=\\\"w-full px-3 sm:px-4 py-2 sm:py-3 text-sm sm:text-base rounded-lg bg-gray-800/40 border border-gray-700/50 focus:ring-2 focus:ring-purple-500 focus:border-transparent text-gray-200 placeholder-gray-500\\\" required disabled={isCreating} maxLength={TITLE_CHARACTER_LIMIT} /> <div className=\\\"absolute bottom-1.5 sm:bottom-2 right-2 text-xs text-gray-400\\\"> {title.length}/{TITLE_CHARACTER_LIMIT} </div> </div> {} <motion.textarea whileFocus={{ scale: 1.02 }} value={content} onChange={(e) => setContent(e.target.value)} placeholder=\\\"What's on your mind?\\\" className=\\\"w-full px-3 sm:px-4 py-2 sm:py-3 text-sm sm:text-base rounded-lg bg-gray-800/40 border border-gray-700/50 focus:ring-2 focus:ring-purple-500 focus:border-transparent text-gray-200 placeholder-gray-500\\\" rows=\\\"3\\\" required disabled={isCreating} /> {} <div className=\\\"space-y-2\\\"> <label className=\\\"block text-sm sm:text-base font-medium text-gray-400\\\"> Upload Image (Optional) </label> <motion.label whileHover={{ scale: 1.02 }} className=\\\"flex flex-col items-center justify-center w-full h-24 sm:h-32 border-2 border-dashed border-gray-700/50 rounded-lg cursor-pointer hover:border-purple-500/50 transition-all relative overflow-hidden group\\\" > <div className=\\\"flex flex-col items-center justify-center pt-3 sm:pt-5 pb-4 sm:pb-6 z-10\\\"> <motion.div animate={{ y: [0, -5, 0] }} transition={{ duration: 2, repeat: Infinity }} > <CameraIcon className=\\\"h-6 w-6 sm:h-8 sm:w-8 text-gray-500 group-hover:text-purple-400 transition-colors\\\" /> </motion.div> <p className=\\\"text-xs sm:text-sm text-gray-500 group-hover:text-purple-300 transition-colors text-center px-2\\\"> Click to upload or drag and drop </p> </div> <div className=\\\"absolute inset-0 bg-gradient-to-r from-purple-600/5 to-blue-600/5 opacity-0 group-hover:opacity-100 transition-opacity\\\" /> <input type=\\\"file\\\" onChange={handleImageChange} className=\\\"hidden\\\" accept=\\\"image} <motion.button whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }} type=\\\"submit\\\" className=\\\"w-full py-2 sm:py-3 rounded-lg bg-gradient-to-r from-purple-600 to-blue-600 text-white font-medium hover:shadow-xl transition-all relative overflow-hidden group\\\" disabled={isCreating} > <span className=\\\"relative z-10 text-sm sm:text-base\\\"> {isCreating ? \\\"Creating...\\\" : \\\"Create Post\\\"} </span> <div className=\\\"absolute inset-0 bg-gradient-to-r from-white/15 to-transparent opacity-0 group-hover:opacity-100 transition-opacity\\\" /> </motion.button> </form> </motion.div> {} <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className=\\\"space-y-4 sm:space-y-6 pb-8\\\" > {posts.map((post, index) => { console.log(\\\"Rendering post:\\\", post); return ( <div ref={index === posts.length - 1 ? lastPostRef : null} key={post._id} > <PostCard {...post} currentUserId={user?._id} onLike={handleLike} onCommentAdded={(updatedPost) => { setPosts((prevPosts) => prevPosts.map((p) => p._id === updatedPost._id ? updatedPost : p ) ); }} /> </div> ); })} {loading && <SkeletonLoader count={3} />} {!loading && !hasMore && ( <motion.div initial={{ scale: 0.95 }} animate={{ scale: 1 }} className=\\\"text-center py-6 sm:py-8 bg-gray-900/50 rounded-lg border border-gray-800/40\\\" > <p className=\\\"text-sm sm:text-base text-gray-400\\\"> No more posts to load </p> </motion.div> )} </motion.div> </div> </div> ); }; export default Home; \" }, { \"file\": \"C:\\\\Users\\\\mykal\\\\Documents\\\\F\\\\feelio.github.io\\\\src\\\\pages\\\\Profile.jsx\", \"content\": \"import React, { useEffect, useState, useCallback } from \\\"react\\\"; import { useSelector } from \\\"react-redux\\\"; import { getPosts } from \\\"../api\\\"; import PostCard from \\\"../Components/PostCard\\\"; import { SparklesIcon } from \\\"@heroicons/react/24/outline\\\"; import { motion, AnimatePresence } from \\\"framer-motion\\\"; import SkeletonLoader from \\\"../Components/SkeletonLoader\\\"; import useInfiniteScroll from \\\"../hooks/useInfiniteScroll\\\"; const Profile = () => { const { user } = useSelector((state) => state.user); const [posts, setPosts] = useState([]); const [loading, setLoading] = useState(true); const [error, setError] = useState(\\\"\\\"); const [hasMore, setHasMore] = useState(true); const [page, setPage] = useState(1); const fetchUserPosts = useCallback(async () => { setLoading(true); setError(\\\"\\\"); try { const response = await getPosts(page); const newPosts = response.posts || []; const userPosts = newPosts.filter((post) => post.user?._id === user?._id); setPosts((prev) => (page === 1 ? userPosts : [...prev, ...userPosts])); setHasMore(response.hasMore); } catch (err) { console.error(\\\"Error fetching user posts:\\\", err); setError(\\\"Failed to fetch posts. Please try again later.\\\"); } finally { setLoading(false); } }, [page, user]); useEffect(() => { fetchUserPosts(); }, [fetchUserPosts]); const [lastPostRef] = useInfiniteScroll({ loading, hasMore, onLoadMore: () => setPage((prev) => prev + 1), }); if (loading && page === 1) { return <SkeletonLoader count={3} />; } if (error) { return ( <div className=\\\"min-h-screen flex items-center justify-center p-4\\\"> <div className=\\\"bg-red-900/30 text-red-400 p-4 rounded-lg border border-red-800/50 backdrop-blur-md\\\"> {error} </div> </div> ); } return ( <div className=\\\"min-h-screen bg-gray-950 pb-16 sm:pb-0\\\"> <div className=\\\"container mx-auto max-w-2xl px-4 py-8 pt-20\\\"> {} <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} className=\\\"mb-8 flex items-center justify-center gap-3\\\" > <motion.div whileHover={{ rotate: 15 }} className=\\\"bg-purple-600/20 p-3 rounded-xl\\\" > <SparklesIcon className=\\\"h-8 w-8 text-purple-400\\\" /> </motion.div> <h1 className=\\\"text-3xl font-bold bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent drop-shadow-[0_0_20px_rgba(129,140,248,0.3)]\\\"> {user?.username}'s Posts </h1> </motion.div> {} <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className=\\\"space-y-6 pb-8\\\" > {posts.map((post, index) => ( <div ref={index === posts.length - 1 ? lastPostRef : null} key={post._id} > <PostCard {...post} currentUserId={user?._id} /> </div> ))} {loading && page > 1 && <SkeletonLoader count={1} />} {!loading && posts.length === 0 && ( <motion.div initial={{ scale: 0.95 }} animate={{ scale: 1 }} className=\\\"text-center py-6 sm:py-8 bg-gray-900/50 rounded-lg border border-gray-800/40\\\" > <p className=\\\"text-sm sm:text-base text-gray-400\\\"> No posts available. Start creating posts! </p> </motion.div> )} {!loading && !hasMore && posts.length > 0 && ( <motion.div initial={{ scale: 0.95 }} animate={{ scale: 1 }} className=\\\"text-center py-6 sm:py-8 bg-gray-900/50 rounded-lg border border-gray-800/40\\\" > <p className=\\\"text-sm sm:text-base text-gray-400\\\"> No more posts to load </p> </motion.div> )} </motion.div> </div> </div> ); }; export default Profile; \" } ] }"
      },
      {
        "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\temp.js",
        "content": "import React, { useState } from \"react\"; import { useDispatch } from \"react-redux\"; import { setUser } from \"../redux/userSlice\"; import { login } from \"../api\"; import { Link, useNavigate } from \"react-router-dom\"; import { SparklesIcon } from \"@heroicons/react/24/outline\"; const Login = () => { const dispatch = useDispatch(); const navigate = useNavigate(); const [email, setEmail] = useState(\"\"); const [password, setPassword] = useState(\"\"); const [error, setError] = useState(\"\"); const [loading, setLoading] = useState(false); const handleLogin = async (e) => { e.preventDefault(); setLoading(true); setError(\"\"); try { const response = await login({ email, password }); if (response.user && response.token) { localStorage.setItem(\"token\", response.token); dispatch( setUser({ user: response.user, token: response.token, }) ); navigate(\"/home\"); } else { setError(\"Invalid response from server. Please try again.\"); } } catch (err) { console.error(\"Error during login:\", err); if (err.response) { setError( err.response.data.message || \"Login failed. Please check your credentials.\" ); } else if (err.request) { setError(\"No response from server. Please check your connection.\"); } else { setError(\"An unexpected error occurred. Please try again.\"); } } finally { setLoading(false); } }; return ( <div className=\"min-h-screen bg-gray-950 flex items-center justify-center p-4\"> {} <div className=\"relative bg-gray-900/80 backdrop-blur-md border border-gray-800/50 rounded-2xl p-8 max-w-md w-full text-center space-y-6 overflow-hidden shadow-lg\"> {} <div className=\"flex justify-center relative\"> <SparklesIcon className=\"h-16 w-16 text-purple-400 relative z-10\" /> <div className=\"absolute w-32 h-32 bg-purple-600/20 blur-[50px] rounded-full\" /> </div> {} <h1 className=\"text-3xl font-bold bg-gradient-to-r from-purple-300 to-blue-300 bg-clip-text text-transparent\"> Welcome Back </h1> {} <form onSubmit={handleLogin} className=\"space-y-4\"> {} <div className=\"text-left\"> <label className=\"block text-sm font-medium text-gray-300 mb-1\"> Email </label> <input type=\"email\" placeholder=\"Enter your email\" value={email} onChange={(e) => setEmail(e.target.value)} className=\"w-full p-3 rounded-lg bg-gray-800/40 border border-gray-700/50 focus:ring-2 focus:ring-purple-500 focus:border-transparent text-white placeholder-gray-400\" required /> </div> {} <div className=\"text-left\"> <label className=\"block text-sm font-medium text-gray-300 mb-1\"> Password </label> <input type=\"password\" placeholder=\"Enter your password\" value={password} onChange={(e) => setPassword(e.target.value)} className=\"w-full p-3 rounded-lg bg-gray-800/40 border border-gray-700/50 focus:ring-2 focus:ring-purple-500 focus:border-transparent text-white placeholder-gray-400\" required /> </div> {} <button type=\"submit\" disabled={loading} className=\"w-full py-3 rounded-lg bg-gradient-to-r from-purple-600 to-blue-600 text-white font-medium hover:opacity-90 transition-all focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 relative overflow-hidden group mt-4\" > <span className=\"relative z-10\"> {loading ? ( <svg className=\"animate-spin h-5 w-5 text-white mx-auto\" xmlns=\"http: fill=\"none\" viewBox=\"0 0 24 24\" > <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\" ></circle> <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\" ></path> </svg> ) : ( \"Login\" )} </span> <div className=\"absolute inset-0 bg-gradient-to-r from-white/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300\" /> </button> {} {error && ( <p className=\"text-red-500 text-sm mt-4 text-center bg-red-900/20 p-2 rounded-lg\"> {error} </p> )} </form> {} <div className=\"relative flex items-center justify-center\"> <div className=\"flex-grow border-t border-gray-700/50\"></div> <span className=\"mx-4 text-gray-400\">or</span> <div className=\"flex-grow border-t border-gray-700/50\"></div> </div> {} <p className=\"mt-4 text-center text-gray-400\"> Don't have an account?{\" \"} <Link to=\"/register\" className=\"text-purple-400 hover:underline font-medium\" > Sign up </Link> </p> </div> </div> ); }; export default Login; "
      },
      {
        "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\vite.config.js",
        "content": " import { defineConfig } from \"vite\"; import react from \"@vitejs/plugin-react\"; import dotenv from \"dotenv\"; dotenv.config(); export default defineConfig({ base: \"/\", plugins: [react()], server: { historyApiFallback: true, }, css: { postcss: { plugins: [require(\"tailwindcss\"), require(\"autoprefixer\")], }, }, define: { \"process.env\": Object.fromEntries( Object.entries(process.env).filter(([key]) => key.startsWith(\"VITE_\")) ), \"process.env.CLOUDINARY_NAME\": JSON.stringify(process.env.CLOUDINARY_NAME), }, }); "
      },
      {
        "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\webpack.config.js",
        "content": "const path = require(\"path\"); const Dotenv = require(\"dotenv-webpack\"); const webpack = require(\"webpack\"); module.exports = { mode: \"development\", entry: \"./src/api/index.js\", output: { path: path.resolve(__dirname, \"dist\"), filename: \"bundle.js\", }, module: { rules: [ { test: /\\.js$/, exclude: /node_modules/, use: { loader: \"babel-loader\", options: { presets: [\"@babel/preset-env\"], }, }, }, ], }, plugins: [ new Dotenv(), new webpack.DefinePlugin({ \"process.env\": JSON.stringify({ DEBUG: process.env.DEBUG, }), }), ], resolve: { fallback: { fs: false, path: false, }, }, }; "
      },
      {
        "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\assests\\404\\messages.js",
        "content": "export const texts = [ \"404: Page got Thanos-snapped\", \"Error: Skill issue detected\", \"This URL is now a TikTok dance\", \"Page not found (it's rizzing up another website)\", \"404: Link became a Discord mod\", \"This page is Ohio \ud83d\udc80\", \"Connection terminated (gyatt in the chat)\", \"Page went full Skibidi Toilet\", \"404: Sigma edit failed\", \"This page is in its Baby Gronk era\", \"Error: Too much rizz overload\", \"Page not found (caught in 4K)\", \"404: Fanum Tax deducted this page\", \"This URL is doing the Grimace Shake\", \"Server error: Kai Cenat stream crashed it\", \"Page is currently Lizzing (iykyk)\", \"404: Link got the Ice Spice 'munch' treatment\", \"This page is a Minecraft YouTuber now\", \"Error: Certified Hood Classic\", \"Page not found (it's a NPC)\", \"404: Bro thinks he's the main character\", \"This page is on a Sidequest (Adin Ross style)\", \"Link got ratio'd by a Twitter bot\", \"Error: Touch grass protocol activated\", \"Page is stuck in a Chucky cheese ball pit\", \"404: Midjourney generated this error\", \"This URL became a Temu ad\", \"Error: Caught lacking (no rizz)\", \"Page not found (it's a Sussy Baka)\", \"404: OnlyFans exclusive content\", \"This page joined the Dark Brandonverse\", \"Error: Cringe culture cancelled it\", \"Page is now a Roblox YouTuber intro\", \"404: Fanfiction deleted this link\", \"This URL failed the Buss It Challenge\", \"Error: 21 Savage concert crashed server\", \"Page not found (Shein version)\", \"404: Link got Yeeted\", \"This page is a DeviantArt OC now\", \"Error: Discord kitten overload\", \"Page became a Reddit mod (RIP)\", \"404: Certified L + Ratio Moment\", \"This URL is now a Bingo tournament\", \"Error: Twitter Blue checkmark expired\", \"Page not found (Vine boom sound)\", \"404: Link got Demon Time'd\", \"This page is in the Backrooms (Level 3999)\", \"Error: Andrew Tate's Bugatti crashed here\", \"Page became a Minecraft speedrun\", \"404: Only Up! (but it's gone)\", \"This URL is a MrBeast thumbnail now\", \"Error: Kai Cenat pizza incident\", \"Page not found (Fanum Tax evasion)\", \"404: It's Morbin' Time\", \"This page is a Fortnite Lobby\", \"Error: Caught in 144p (no gyatt)\", \"Link became a Twitter Space host\", \"404: Page got Doja Cat'ed (scandal arc)\", \"This URL is now a Sssniperwolf face reveal\", \"Error: KSI Prime hydration failed\", \"Page not found (it's Baby Shark now)\", \"404: Link became a Valorant streamer\", \"This page is in its K-Pop fancam era\", \"Error: No bitches? \ud83e\udd64\", \"Page is now a Dream SMP fanfic\", \"404: Certified Goofy Ahh Moment\", \"This URL failed the Blue Lock trials\", \"Error: Fumbled the Griddy\", \"Page not found (Only in Ohio \ud83d\ude08)\", \"404: Link became a Twitter Spaces DJ\", \"This page is a 2016 Minecraft parody song\", \"Error: TikTok brainrot detected\", \"Page got Yeet-ed into the void\", \"404: Certified Bruh Moment\u2122\", \"This URL is now a Spotify AI cover\", \"Error: Twitter (X) algorithm shadowban\", \"Page not found (it's a LankyBox video)\", \"404: Link became a MrBeast challenge\", \"This page is in its E-Girl arc\", \"Error: 100T Content House drama\", \"Page got the Kai Cenat 100 Thieves treatment\", \"404: Certified Cringe Fail Compilation\", \"This URL is now a Minecraft parkour map\", \"Error: TikTok unboxing video crashed it\", \"Page not found (it's a BTS fan edit)\", \"404: Link became a Twitch copypasta\", \"This page is doing the GTA6 leak walk\", \"Error: YouTube Shorts attention span\", \"Page got Demon Slayer'ed (entertainment arc)\", \"404: Certified Twitter (X) Doxxing Moment\", \"This URL is now a OnlyJayus apology video\", \"Error: Discord light mode user detected\", \"Page not found (it's a Kai Cenat react stream)\", \"404: Link became a Logan Paul NFT\", \"This page is in its Corpse Husband era\", \"Error: Twitter Spaces echo chamber\", \"Page got the 'I showed you my...' treatment\", \"404: Certified Cbat Moment \ud83c\udfb6\", \"This URL is now a Minecraft Dream face reveal\", \"Error: Instagram vs. Reality filter failed\", \"Page not found (it's a TikTok POV)\", \"404: Link became a Twitter Blue checkmark\", \"This page is doing the Wednesday Addams dance\", \"Error: Reddit karma requirement not met\", \"Page got the Area 51 Raid treatment\", \"404: Certified 'It's Corn!' Moment \ud83c\udf3d\", \"This URL is now a Slenderman ARG\", \"Error: 2016 YouTube Rewind flashbacks\", \"Page not found (it's a Gacha Life OC)\", \"404: Link became a TikTok POV boyfriend\", \"This page is in its ASMR Mukbang era\", \"Error: Twitter (X) Community Notes violated\", \"Page got the 'Leonardo DiCaprio Oscar' treatment\", \"404: Certified 'I can fix him' Moment\", \"This URL is now a Roblox obby speedrun\", \"Error: Discord kitten voice chat overload\", \"Page not found (it's a Sssniperwolf reaction vid)\", \"404: Link became a Temu haul unboxing\", \"This page is doing the Silly Little Walk\u2122\", \"Error: Reddit mod powertrip detected\", \"Page got the 'Girl Dinner' treatment \ud83c\udf77\", \"404: Certified 'Oh nah, I'd win' Moment\", \"This URL is now a Minecraft mob vote drama\", \"Error: Twitter (X) For You Page algorithm\", \"Page not found (it's a Kai Cenat 100 Thieves meme)\", \"404: Link became a MrBeast Burger review\", \"This page is in its BBL Era \ud83d\udc85\", \"Error: TikTok POV: You're Mid\", \"Page got the 'Barbieheimer' treatment\", \"404: Certified 'Is he acoustic?' Moment\", \"This URL is now a K-Pop fancam edit\", \"Error: Discord nitro simp detected\", \"Page not found (it's a Skibidi Toilet lore video)\", \"404: Link became a Twitter (X) Trending Topic\", \"This page is doing the 'It's giving...' walk\", \"Error: Reddit karma farming failed\", \"Page got the 'Girl Math' treatment \ud83d\udcb8\", \"404: Certified 'Let him cook' Moment\", \"This URL is now a Minecraft Dream SMP LARP\", \"Error: Twitter (X) Space host rizz failed\", \"Page not found (it's a Kai Cenat pizza meme)\", \"404: Link became a Temu version of itself\", \"This page is in its Girlboss Gaslight Gatekeep era\", \"Error: TikTok algorithm jail detected\", \"Page got the 'Live Laugh Love' treatment\", \"404: Certified 'I'm the drama' Moment\", \"This URL is now a Roblox Doors gameplay\", \"Error: Discord kitten egirl overload\", \"Page not found (it's a Kai Cenat gyatt compilation)\", \"404: Link became a Logan Paul CryptoZoo NFT\", \"This page is doing the Roman Empire walk \ud83d\udc82\", \"Error: Twitter (X) Verified checkmark scam\", \"Page got the 'Hot Girl Walk' treatment\", \"404: Certified 'It's the autism creature'\", \"This URL is now a Minecraft speedrun WR attempt\", \"Error: Reddit 'Am I the Asshole?' verdict: YTA\", \"Page not found (it's a Kai Cenat Adin Ross collab)\", ]; "
      },
      {
        "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\tests\\post.test.js",
        "content": "const request = require(\"supertest\"); const app = require(\"../server\"); const Post = require(\"../models/Post\"); const User = require(\"../models/User\"); describe(\"Post Endpoints\", () => { let authToken; beforeAll(async () => { await User.create({ username: \"testuser\", email: \"test@example.com\", password: \"password123\", }); const res = await request(app) .post(\"/api/v1/auth/login\") .send({ email: \"test@example.com\", password: \"password123\" }); authToken = res.body.token; }); test(\"Create post with authentication\", async () => { const res = await request(app) .post(\"/api/v1/posts\") .set(\"Authorization\", `Bearer ${authToken}`) .send({ title: \"Test Post\", content: \"Test Content\" }); expect(res.statusCode).toEqual(201); expect(res.body.data.post.title).toBe(\"Test Post\"); }); }); "
      }
    ],
    "backend": [
      {
        "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\backend\\index.js",
        "content": "import express from \"express\"; import mongoose from \"mongoose\"; import cors from \"cors\"; import dotenv from \"dotenv\"; import path from \"path\"; import { fileURLToPath } from \"url\"; import cloudinary from \"cloudinary\"; import rateLimit from \"express-rate-limit\"; dotenv.config(); const app = express(); const allowedOrigins = [ \"http: \"http: \"https: process.env.VITE_BACKEND_URL || \"https:]; app.use( cors({ origin: allowedOrigins, credentials: true, methods: [\"GET\", \"POST\", \"PUT\", \"DELETE\"], allowedHeaders: [\"Content-Type\", \"Authorization\"], }) ); app.use(express.json()); const limiter = rateLimit({ windowMs: 15 * 60 * 1000, max: 100, }); app.use(limiter); mongoose .connect(process.env.MONGO_URI) .then(() => console.log(\"Connected to MongoDB\")) .catch((err) => console.error(\"MongoDB Connection Error:\", err)); import userRoutes from \"./routes/userRoutes.js\"; import postRoutes from \"./routes/postRoutes.js\"; app.use(\"/api/users\", userRoutes); app.use(\"/api/posts\", postRoutes); const __dirname = path.dirname(fileURLToPath(import.meta.url)); app.use(express.static(path.join(__dirname, \"/dist\"))); app.get(\"*\", (req, res) => { res.sendFile(path.join(__dirname, \"/dist/index.html\")); }); app.get(\"/\", (req, res) => { res.send(\"Feelio API is running!\"); }); cloudinary.config({ cloud_name: process.env.CLOUDINARY_NAME, api_key: process.env.CLOUDINARY_KEY, api_secret: process.env.CLOUDINARY_SECRET, }); const PORT = process.env.PORT || 5000; app.listen(PORT, () => console.log(`Server running on port ${PORT}`)); "
      },
      {
        "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\backend\\package.json",
        "content": "{ \"name\": \"backend\", \"version\": \"1.0.0\", \"main\": \"index.js\", \"homepage\": \"https: \"scripts\": { \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\", \"start\": \"node index.js\", \"deploy\": \"gh-pages -d dist\", \"build\": \"echo 'No build step for server'\", \"dev\": \"nodemon index.js\" }, \"keywords\": [], \"author\": \"\", \"license\": \"ISC\", \"description\": \"\", \"dependencies\": { \"bcrypt\": \"^5.1.1\", \"cloudinary\": \"^1.41.3\", \"cors\": \"^2.8.5\", \"dotenv\": \"^16.4.7\", \"express\": \"^4.21.2\", \"express-rate-limit\": \"^7.5.0\", \"jsonwebtoken\": \"^9.0.2\", \"mongodb\": \"^6.12.0\", \"mongoose\": \"^8.9.5\", \"multer\": \"^1.4.5-lts.1\", \"multer-storage-cloudinary\": \"^4.0.0\", \"lusca\": \"^1.7.0\" }, \"devDependencies\": { \"dotenv-webpack\": \"^8.1.0\", \"gh-pages\": \"^6.3.0\", \"webpack\": \"^5.98.0\", \"webpack-cli\": \"^6.0.1\", \"webpack-dev-server\": \"^5.2.0\" } } "
      },
      {
        "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\backend\\server.js",
        "content": "require(\"dotenv\").config(); const express = require(\"express\"); const mongoose = require(\"mongoose\"); const cors = require(\"cors\"); const helmet = require(\"helmet\"); const { xss } = require(\"express-xss-sanitizer\"); const mongoSanitize = require(\"express-mongo-sanitize\"); const cookieParser = require(\"cookie-parser\"); const lusca = require(\"lusca\"); const rateLimit = require(\"express-rate-limit\"); const hpp = require(\"hpp\"); const cluster = require(\"cluster\"); const os = require(\"os\"); const userRoutes = require(\"./routes/userRoutes\"); const postRoutes = require(\"./routes/postRoutes\"); const errorHandler = require(\"./middleware/errorHandler\"); const logger = require(\"./utils/logger\"); const app = express(); app.use( helmet({ contentSecurityPolicy: { directives: { defaultSrc: [\"'self'\"], scriptSrc: [\"'self'\", \"'unsafe-inline'\"], styleSrc: [\"'self'\", \"'unsafe-inline'\"], imgSrc: [\"'self'\", \"data:\", \"blob:\"], }, }, crossOriginResourcePolicy: { policy: \"cross-origin\" }, }) ); app.use(xss()); app.use(mongoSanitize()); app.use(hpp()); app.use(cookieParser()); app.use(express.json({ limit: \"10kb\" })); app.use(lusca.csrf()); const limiter = rateLimit({ windowMs: 15 * 60 * 1000, max: 200, message: \"Too many requests from this IP\", standardHeaders: true, legacyHeaders: false, }); app.use(\"/api\", limiter); let isConnected = false; const connectWithRetry = async () => { if (isConnected) return; try { await mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true, bufferCommands: false, }); isConnected = true; if (cluster.isMaster || cluster.worker.id === 1) { logger.info(\"MongoDB connected successfully\"); } } catch (err) { logger.error(`MongoDB connection failed: ${err.message}`); setTimeout(connectWithRetry, 5000); } }; if (process.env.NODE_ENV === \"production\" && cluster.isMaster) { const numWorkers = os.cpus().length; logger.info(`Master ${process.pid} is running`); for (let i = 0; i < numWorkers; i++) cluster.fork(); cluster.on(\"exit\", (worker) => { logger.warn(`Worker ${worker.process.pid} died`); cluster.fork(); }); } else { connectWithRetry(); app.use( cors({ origin: process.env.CLIENT_URL, credentials: true, methods: [\"GET\", \"POST\", \"PUT\", \"DELETE\"], allowedHeaders: [\"Content-Type\", \"Authorization\"], }) ); app.use(\"/api/v1/users\", userRoutes); app.use(\"/api/v1/posts\", postRoutes); app.get(\"/health\", (req, res) => res.status(200).json({ status: \"ok\" })); app.use(errorHandler); const PORT = process.env.PORT || 5000; const server = app.listen(PORT, () => { logger.info( `Server running in ${process.env.NODE_ENV} mode on port ${PORT}` ); }); process.on(\"unhandledRejection\", (err) => { logger.error(`Unhandled Rejection: ${err.message}`); server.close(() => process.exit(1)); }); } "
      },
      {
        "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\backend\\routes\\postRoutes.js",
        "content": "const multer = require(\"multer\"); const path = require(\"path\"); const fs = require(\"fs\"); const router = require(\"express\").Router(); const Post = require(\"../models/Post\"); const verifyToken = require(\"../middleware/verifyToken\"); const cloudinary = require(\"cloudinary\").v2; const { CloudinaryStorage } = require(\"multer-storage-cloudinary\"); cloudinary.config({ cloud_name: process.env.CLOUDINARY_NAME, api_key: process.env.CLOUDINARY_KEY, api_secret: process.env.CLOUDINARY_SECRET, }); const storage = new CloudinaryStorage({ cloudinary: cloudinary, params: { folder: \"feelio/posts\", allowed_formats: [\"jpg\", \"jpeg\", \"png\", \"webp\"], quality: \"auto:best\", transformation: [ { width: 1000, height: 1000, crop: \"limit\" }, { fetch_format: \"auto\" }, ], use_filename: true, unique_filename: false, overwrite: true, }, }); const fileFilter = (req, file, cb) => { if ( [\"image/jpeg\", \"image/png\", \"image/jpg\", \"image/webp\"].includes( file.mimetype ) ) { cb(null, true); } else { cb( new Error(\"Invalid file type. Only JPEG, PNG, and JPG are allowed.\"), false ); } }; const upload = multer({ storage, fileFilter, limits: { fileSize: 10 * 1024 * 1024 }, }); router.post(\"/\", verifyToken, upload.single(\"image\"), async (req, res) => { try { console.log(\"Uploaded file:\", req.file); console.log(\"Request body:\", req.body); const { title, content } = req.body; const newPost = new Post({ title, content, user: req.user.id, }); if (req.file) { newPost.image = { public_id: req.file.filename, url: req.file.path, }; } else { console.log(\"No file uploaded\"); } const savedPost = await newPost.save(); res.status(201).json(savedPost); } catch (err) { console.error(\"Error creating post:\", err); res.status(500).json({ message: \"Server Error\" }); } }); router.get(\"/\", async (req, res) => { try { const page = parseInt(req.query.page) || 1; const limit = parseInt(req.query.limit) || 5; const skip = (page - 1) * limit; const posts = await Post.find() .sort({ createdAt: -1 }) .skip(skip) .limit(limit) .populate(\"user\", [\"username\"]) .populate(\"likes\", [\"username\"]) .populate(\"comments.user\", [\"username\"]); const totalPosts = await Post.countDocuments(); const hasMore = totalPosts > skip + limit; res.status(200).json({ posts, hasMore, totalPosts, currentPage: page, totalPages: Math.ceil(totalPosts / limit), }); } catch (err) { res.status(500).json({ message: \"Server Error\" }); } }); router.get(\"/:id\", async (req, res) => { try { const post = await Post.findById(req.params.id) .populate(\"user\", [\"username\"]) .populate(\"likes\", [\"username\"]) .populate(\"comments.user\", [\"username\"]) .lean(); if (!post) return res.status(404).json(\"Post not found\"); post.comments = post.comments.sort((a, b) => b.createdAt - a.createdAt); res.status(200).json(post); } catch (err) { res.status(500).json({ message: \"Server Error\" }); } }); router.put(\"/:id/like\", verifyToken, async (req, res) => { try { const post = await Post.findById(req.params.id); if (!post) return res.status(404).json({ message: \"Post not found\" }); const userId = req.user.id; if (post.likes.includes(userId)) { post.likes = post.likes.filter((id) => id.toString() !== userId); } else { post.likes.push(userId); } const updatedPost = await post.save(); const populatedPost = await Post.findById(updatedPost._id) .populate(\"user\", [\"username\"]) .populate(\"likes\", [\"username\"]); res.json(populatedPost); } catch (error) { console.error(error); res.status(500).json({ message: \"Server Error\" }); } }); router.post(\"/:id/comment\", verifyToken, async (req, res) => { try { if (!req.body.text || req.body.text.trim() === \"\") { return res.status(400).json(\"Comment text is required\"); } const post = await Post.findById(req.params.id); if (!post) return res.status(404).json(\"Post not found\"); const newComment = { text: req.body.text, user: req.user.id, createdAt: new Date(), }; post.comments.push(newComment); await post.save(); const updatedPost = await Post.findById(req.params.id) .populate(\"user\", [\"username\"]) .populate(\"likes\", [\"username\"]) .populate(\"comments.user\", [\"username\"]); res.status(200).json(updatedPost); } catch (err) { res.status(500).json({ message: \"Server Error\" }); } }); module.exports = router; "
      },
      {
        "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\backend\\routes\\userRoutes.js",
        "content": "const router = require(\"express\").Router(); const User = require(\"../models/User\"); const bcrypt = require(\"bcrypt\"); const jwt = require(\"jsonwebtoken\"); const verifyToken = require(\"../middleware/verifyToken\"); router.get(\"/me\", verifyToken, async (req, res) => { try { const user = await User.findById(req.user.id).select(\"-password\"); if (!user) { return res.status(404).json({ message: \"User not found\" }); } res.status(200).json(user); } catch (err) { res.status(500).json({ message: \"Server Error\" }); } }); router.post(\"/register\", async (req, res) => { try { const { username, email, password } = req.body; const existingUser = await User.findOne({ $or: [{ email }, { username }] }); if (existingUser) { const message = existingUser.email === email ? \"Email already exists\" : \"Username already exists\"; return res.status(400).json({ message }); } const hashedPassword = await bcrypt.hash(password, 10); const newUser = new User({ username, email, password: hashedPassword, }); const savedUser = await newUser.save(); const sanitizedUser = { _id: savedUser._id, username: savedUser.username, email: savedUser.email, }; const token = jwt.sign({ userId: savedUser._id }, process.env.JWT_SECRET, { expiresIn: \"1h\", }); res.status(201).json({ user: sanitizedUser, token }); } catch (err) { console.error(\"Registration error:\", err); res.status(500).json({ message: \"Server Error\" }); } }); router.post(\"/login\", async (req, res) => { try { const { email, password } = req.body; if (!email || !password) { return res .status(400) .json({ message: \"Email and password are required\" }); } const user = await User.findOne({ email: { $eq: email } }); if (!user) { return res.status(400).json({ message: \"User not found\" }); } const isMatch = await bcrypt.compare(password, user.password); if (!isMatch) { return res.status(400).json({ message: \"Invalid credentials\" }); } const sanitizedUser = { _id: user._id, username: user.username, email: user.email, }; const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: \"1h\", }); res.status(200).json({ user: sanitizedUser, token }); } catch (err) { console.error(\"Login error:\", err); res.status(500).json({ message: \"Server Error\" }); } }); module.exports = router; "
      },
      {
        "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\backend\\utils\\email.js",
        "content": "const nodemailer = require(\"nodemailer\"); const pug = require(\"pug\"); const htmlToText = require(\"html-to-text\"); const logger = require(\"./logger\"); class Email { constructor(user, url) { this.to = user.email; this.firstName = user.username.split(\" \")[0]; this.url = url; this.from = `Feelio <${process.env.EMAIL_FROM}>`; } newTransport() { return nodemailer.createTransport({ host: process.env.EMAIL_HOST, port: process.env.EMAIL_PORT, auth: { user: process.env.EMAIL_USER, pass: process.env.EMAIL_PASS, }, }); } async send(template, subject) { const html = pug.renderFile(`${__dirname}/../views/email/${template}.pug`, { firstName: this.firstName, url: this.url, subject, }); const mailOptions = { from: this.from, to: this.to, subject, html, text: htmlToText.convert(html), }; await this.newTransport().sendMail(mailOptions); } async sendPasswordReset() { await this.send( \"passwordReset\", \"Your password reset token (valid for 10 minutes)\" ); } } module.exports = Email; "
      },
      {
        "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\backend\\utils\\socket.js",
        "content": "let io; const init = (server) => { io = require(\"socket.io\")(server, { cors: { origin: process.env.CLIENT_URL, methods: [\"GET\", \"POST\"], }, }); io.on(\"connection\", (socket) => { socket.on(\"join\", (userId) => { socket.join(userId); logger.info(`User ${userId} connected to socket`); }); socket.on(\"disconnect\", () => { logger.info(\"Client disconnected\"); }); }); return io; }; const getIO = () => { if (!io) throw new Error(\"Socket.io not initialized\"); return io; }; module.exports = { init, getIO }; "
      }
    ],
    "frontend": [
      {
        "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\src\\App.jsx",
        "content": "import React, { useEffect, useState } from \"react\"; import { Provider, useDispatch, useSelector } from \"react-redux\"; import { BrowserRouter as Router, Routes, Route, Navigate, } from \"react-router-dom\"; import Home from \"./pages/Home\"; import Login from \"./pages/Login\"; import Register from \"./pages/Register\"; import Profile from \"./pages/Profile\"; import Navbar from \"./components/Navbar\"; import NotFound from \"./Components/NotFound\"; import { setUser } from \"./redux/userSlice\"; import { fetchUserData } from \"./api\"; import store from \"./redux/store\"; import \"./index.css\"; const AppContent = () => { const dispatch = useDispatch(); const { token } = useSelector((state) => state.user); const [darkMode, setDarkMode] = useState(false); const [loading, setLoading] = useState(true); useEffect(() => { const checkAuth = async () => { const token = localStorage.getItem(\"token\"); if (token) { try { const userData = await fetchUserData(); dispatch(setUser({ user: userData, token })); } catch (err) { console.error(\"Failed to fetch user data:\", err); localStorage.removeItem(\"token\"); } } setLoading(false); }; checkAuth(); }, [dispatch]); if (loading) return <div>Loading...</div>; return ( <div className={darkMode ? \"dark\" : \"\"}> <Router> <Navbar darkMode={darkMode} setDarkMode={setDarkMode} /> <Routes> <Route path=\"/\" element={ token ? ( <Navigate to=\"/home\" replace /> ) : ( <Navigate to=\"/login\" replace /> ) } /> <Route path=\"/home\" element={token ? <Home /> : <Navigate to=\"/login\" replace />} /> <Route path=\"/profile\" element={token ? <Profile /> : <Navigate to=\"/login\" replace />} /> <Route path=\"/login\" element={<Login />} /> <Route path=\"/register\" element={<Register />} /> <Route path=\"*\" element={<NotFound />} /> </Routes> </Router> </div> ); }; const App = () => ( <Provider store={store}> <AppContent /> </Provider> ); export default App; "
      },
      {
        "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\src\\api\\index.js",
        "content": "import axios from \"axios\"; const apiUrl = process.env.VITE_BACKEND_URL || (window.location.hostname === \"localhost\" ? \"http: : \"https: const API = axios.create({ baseURL: `${apiUrl}/api`, withCredentials: true, timeout: 10000, }); API.interceptors.request.use((req) => { const token = localStorage.getItem(\"token\"); if (token) req.headers.Authorization = `Bearer ${token}`; return req; }); export const register = async (userData) => { try { const response = await API.post(\"/users/register\", userData); return response.data; } catch (error) { console.error( \"Error registering user:\", error.response?.data || error.message ); throw new Error(error.response?.data?.message || \"Registration failed\"); } }; export const login = async (userData) => { try { const response = await API.post(\"/users/login\", userData); return response.data; } catch (error) { console.error(\"Error logging in:\", error); throw error; } }; export const fetchUserData = async () => { try { const response = await API.get(\"/users/me\"); return response.data; } catch (error) { console.error(\"Error fetching user data:\", error); throw error; } }; export { getPosts, createPost, likePost, addComment, getSinglePost, } from \"./posts\"; export default API; "
      },
      {
        "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\src\\api\\posts.js",
        "content": "import API from \"./index\"; export const getPosts = async (page = 1, limit = 5) => { try { const response = await API.get(`/posts?page=${page}&limit=${limit}`); console.log(\"Posts API Response:\", response); return response.data; } catch (error) { console.error(\"API Error Details:\", { status: error.response?.status, data: error.response?.data, config: error.config, }); throw new Error(error.response?.data?.message || \"Failed to fetch posts\"); } }; export const createPost = async (postData) => { try { const config = postData instanceof FormData ? { headers: {} } : { headers: { \"Content-Type\": \"application/json\" } }; const response = await API.post(\"/posts\", postData, config); return response.data; } catch (error) { console.error(\"Error creating post:\", error); throw error; } }; export const likePost = async (postId) => { try { const response = await API.put(`/posts/${postId}/like`); return response.data; } catch (error) { console.error(\"Error liking post:\", error.response?.data || error.message); throw error; } }; export const addComment = async (postId, commentText) => { try { const response = await API.post(`/posts/${postId}/comment`, { text: commentText, }); return response.data; } catch (error) { console.error(\"Error adding comment:\", error); throw error; } }; export const getSinglePost = async (postId) => { try { const response = await API.get(`/posts/${postId}`); return response.data; } catch (error) { console.error(\"Error fetching single post:\", error); throw error; } }; "
      },
      {
        "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\src\\api\\users.js",
        "content": "const axios = require(\"axios\"); const apiUrl = typeof window !== \"undefined\" ? window.VITE_BACKEND_URL + \"/api/\" : \"https: export const fetchUserData = async () => { try { const token = localStorage.getItem(\"token\"); const response = await axios.get(`${apiUrl}/users/me`, { headers: { Authorization: `Bearer ${token}`, }, }); return response.data.data.user; } catch (error) { throw new Error(\"Failed to fetch user data\"); } }; "
      },
      {
        "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\src\\Components\\AvatarUpload.jsx",
        "content": " import React, { useState } from \"react\"; import { useMutation } from \"@tanstack/react-query\"; import { updateProfile } from \"../api/users\"; import { useAuth } from \"../context/AuthContext\"; const AvatarUpload = () => { const { user, updateUser } = useAuth(); const [preview, setPreview] = useState(user?.avatar); const { mutate } = useMutation(updateProfile, { onSuccess: (data) => { updateUser(data.user); setPreview(data.user.avatar); }, }); const handleChange = async (e) => { const file = e.target.files[0]; if (!file) return; const reader = new FileReader(); reader.onload = () => setPreview(reader.result); reader.readAsDataURL(file); const formData = new FormData(); formData.append(\"avatar\", file); mutate(formData); }; return ( <div className=\"avatar-upload\"> <label> <input type=\"file\" accept=\"image/*\" onChange={handleChange} hidden /> <img src={preview || \"/default-avatar.png\"} alt=\"Avatar\" className=\"w-32 h-32 rounded-full cursor-pointer\" /> </label> </div> ); }; export default AvatarUpload; "
      },
      {
        "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\src\\Components\\FollowButton.jsx",
        "content": "import React from \"react\"; import axios from \"axios\"; import { useDispatch } from \"react-redux\"; import { motion } from \"framer-motion\"; import { addFollower, removeFollower } from \"../redux/userSlice\"; const FollowButton = ({ userId, isFollowing }) => { const dispatch = useDispatch(); const handleFollow = async () => { try { await axios.post(`/api/users/follow/${userId}`); if (isFollowing) { dispatch(removeFollower(userId)); } else { dispatch(addFollower(userId)); } } catch (err) { console.error(\"Follow error:\", err); } }; return ( <motion.button whileHover={{ scale: 1.05 }} onClick={handleFollow} className={`px-4 py-2 rounded-full ${ isFollowing ? \"bg-gray-800 hover:bg-gray-700\" : \"bg-purple-600 hover:bg-purple-700\" } text-white transition-colors`} > {isFollowing ? \"Following\" : \"Follow\"} </motion.button> ); }; export default FollowButton; "
      },
      {
        "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\src\\Components\\PostCard.jsx",
        "content": "import React, { useState } from \"react\"; import { HeartIcon, ChatBubbleOvalLeftIcon, XMarkIcon, ArrowsPointingOutIcon, } from \"@heroicons/react/24/outline\"; import { HeartIcon as HeartIconSolid } from \"@heroicons/react/24/solid\"; import moment from \"moment\"; import { addComment } from \"../api\"; import { motion, AnimatePresence } from \"framer-motion\"; const PostCard = ({ _id, title, content, author, image: postImage, likes = [], comments: initialComments = [], createdAt, onCommentAdded, onLike, currentUserId, }) => { const [showComments, setShowComments] = useState(false); const [newComment, setNewComment] = useState(\"\"); const [isSubmitting, setIsSubmitting] = useState(false); const [comments, setComments] = useState(initialComments); const [isContentExpanded, setIsContentExpanded] = useState(false); const [expandedComments, setExpandedComments] = useState({}); const [commentsScrollTop, setCommentsScrollTop] = useState(0); const [showImageModal, setShowImageModal] = useState(false); const MAX_PREVIEW_LENGTH = 150; const shouldShowExpand = content.length > MAX_PREVIEW_LENGTH; const displayContent = isContentExpanded ? content : content.slice(0, MAX_PREVIEW_LENGTH) + (shouldShowExpand ? \"...\" : \"\"); const userLiked = likes.some( (like) => (like._id?.toString() || like.toString()) === currentUserId?.toString() ); const handleCommentSubmit = async (e) => { e.preventDefault(); if (!newComment.trim() || isSubmitting) return; setIsSubmitting(true); try { const updatedPost = await addComment(_id, newComment); setComments(updatedPost.comments); setNewComment(\"\"); onCommentAdded(updatedPost); } catch (err) { console.error(\"Error adding comment:\", err); } finally { setIsSubmitting(false); } }; const handleCommentsScroll = (e) => { setCommentsScrollTop(e.target.scrollTop); }; const handleLike = async () => { try { await onLike(_id); } catch (err) { console.error(\"Error liking post:\", err); } }; const toggleContent = () => { setIsContentExpanded(!isContentExpanded); if (!isContentExpanded) { requestAnimationFrame(() => { window.scrollTo({ top: window.scrollY + 50, behavior: \"smooth\", }); }); } }; const toggleComment = (commentId) => { setExpandedComments((prev) => ({ ...prev, [commentId]: !prev[commentId], })); }; const handleImageClick = () => { setShowImageModal(true); }; return ( <motion.div layout initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.2 }} className=\"p-6 bg-gray-900/80 backdrop-blur-md rounded-xl shadow-xl transition-all relative group hover:bg-gray-900/90\" > {} <div className=\"flex items-center justify-between mb-4\"> <div className=\"flex items-center gap-3\"> <motion.div whileHover={{ scale: 1.05 }} className=\"relative bg-gradient-to-r from-purple-500 to-blue-500 p-0.5 rounded-full\" > <div className=\"w-10 h-10 bg-gray-900 rounded-full flex items-center justify-center\"> <span className=\"text-xl font-bold bg-gradient-to-r from-purple-300 to-blue-300 bg-clip-text text-transparent\"> {author?.charAt(0).toUpperCase() || \"U\"} </span> </div> </motion.div> <div> <p className=\"font-medium text-gray-100\">{author}</p> <p className=\"text-sm text-gray-400\"> {moment(createdAt).fromNow()} </p> </div> </div> </div> {} {postImage ? ( <motion.div className=\"mb-4 rounded-xl overflow-hidden relative cursor-pointer\" whileHover={{ scale: 1.01 }} > <button onClick={handleImageClick} className=\"w-full h-full block relative group\" > <img src={postImage.url} alt=\"Post content\" className=\"w-full h-auto max-h-[600px] object-cover\" loading=\"lazy\" style={{ aspectRatio: \"1 / 1\" }} /> <div className=\"absolute inset-0 bg-gradient-to-t from-black/30 to-transparent opacity-0 group-hover:opacity-100 transition-opacity\" /> <ArrowsPointingOutIcon className=\"absolute top-3 right-3 h-6 w-6 text-white opacity-0 group-hover:opacity-75 transition-opacity\" /> </button> </motion.div> ) : ( <div className=\"\"> {} {} </div> )} {} <AnimatePresence> {showImageModal && ( <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }} className=\"fixed inset-0 z-50 bg-black/90 backdrop-blur-2xl flex items-center justify-center p-4\" onClick={() => setShowImageModal(false)} > <motion.div className=\"relative max-w-full max-h-full rounded-2xl overflow-hidden\" initial={{ scale: 0.95 }} animate={{ scale: 1 }} exit={{ scale: 0.95 }} onClick={(e) => e.stopPropagation()} > <img src={postImage.url} alt=\"Post content\" className=\"max-w-full max-h-[90vh] object-contain rounded-2xl\" /> <button className=\"absolute top-4 right-4 p-2 bg-gray-900/80 backdrop-blur-lg rounded-full hover:bg-gray-800/60 transition-colors group\" onClick={() => setShowImageModal(false)} > <XMarkIcon className=\"h-6 w-6 text-gray-200 group-hover:text-purple-400\" /> </button> </motion.div> </motion.div> )} </AnimatePresence> {} <div className=\"space-y-4\"> <h2 className=\"text-xl font-bold text-gray-100\">{title}</h2> <div className=\"relative\"> <AnimatePresence initial={false}> <motion.div layout initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }} transition={{ duration: 0.2 }} className=\"overflow-hidden\" > <p className=\"text-gray-300 whitespace-pre-line break-words\"> {displayContent} </p> </motion.div> </AnimatePresence> {shouldShowExpand && !isContentExpanded && ( <button onClick={toggleContent} className=\"text-purple-400 hover:text-purple-300 text-sm font-medium mt-2 transition-colors\" > Show more </button> )} </div> </div> {} <div className=\"flex items-center gap-6 mt-4\"> <motion.button whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }} onClick={handleLike} className=\"flex items-center gap-2 group\" > {userLiked ? ( <HeartIconSolid className=\"h-6 w-6 text-red-500\" /> ) : ( <HeartIcon className=\"h-6 w-6 text-gray-400 group-hover:text-red-400 transition-colors\" /> )} <span className={`text-sm ${ userLiked ? \"text-red-500\" : \"text-gray-400\" }`} > {likes.length} </span> </motion.button> <motion.button whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }} onClick={() => setShowComments(!showComments)} className=\"flex items-center gap-2 group\" > <ChatBubbleOvalLeftIcon className=\"h-6 w-6 text-gray-400 group-hover:text-blue-400 transition-colors\" /> <span className=\"text-sm text-gray-400\">{comments.length}</span> </motion.button> </div> {} <AnimatePresence> {showComments && ( <motion.div initial={{ opacity: 0, height: 0 }} animate={{ opacity: 1, height: \"auto\" }} exit={{ opacity: 0, height: 0 }} className=\"mt-4 pt-4 border-t border-gray-800/40 relative\" > {} <motion.button initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: Math.min(commentsScrollTop, 100), transition: { duration: 0.2 }, }} exit={{ opacity: 0 }} className=\"fixed md:absolute right-8 top-24 md:right-4 md:-top-4 z-50 p-2 bg-gray-800/80 backdrop-blur-lg rounded-full hover:bg-gray-700/60 transition-colors group\" onClick={() => setShowComments(false)} > <XMarkIcon className=\"h-6 w-6 text-gray-200 group-hover:text-purple-400\" /> </motion.button> {} <form onSubmit={handleCommentSubmit} className=\"mb-4\"> <motion.div whileFocus={{ scale: 1.02 }} className=\"relative\"> <input type=\"text\" value={newComment} onChange={(e) => setNewComment(e.target.value)} placeholder=\"Add a comment...\" className=\"w-full px-4 py-3 rounded-xl bg-gray-800/50 border border-gray-700/30 focus:ring-2 focus:ring-purple-500 focus:border-transparent text-gray-200 placeholder-gray-500 focus:outline-none\" disabled={isSubmitting} /> </motion.div> <motion.button whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }} type=\"submit\" className=\"w-full py-2.5 text-sm bg-gradient-to-r from-purple-500 to-blue-500 text-white rounded-xl hover:shadow-lg transition-all relative overflow-hidden group\" disabled={isSubmitting} > <span className=\"relative z-10\"> {isSubmitting ? \"Posting...\" : \"Post Comment\"} </span> <div className=\"absolute inset-0 bg-gradient-to-r from-white/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity\" /> </motion.button> </form> {} <div className=\"space-y-4 max-h-[500px] overflow-y-auto scrollbar-thin scrollbar-thumb-gray-700 scrollbar-track-transparent\" onScroll={handleCommentsScroll} > {comments .slice() .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt)) .map((comment) => ( <motion.div key={comment._id} initial={{ opacity: 0 }} animate={{ opacity: 1 }} className=\"p-3 bg-gray-800/50 rounded-xl\" > <div className=\"flex items-start gap-3\"> <div className=\"w-7 h-7 bg-gradient-to-r from-purple-500 to-blue-500 rounded-full flex items-center justify-center text-xs text-white\"> {comment.user?.username?.charAt(0).toUpperCase() || \"U\"} </div> <div className=\"flex-1 min-w-0\"> <div className=\"space-y-2\"> <span className=\"text-sm font-medium text-gray-200 truncate\"> {comment.user?.username || \"Unknown\"} </span> <AnimatePresence initial={false}> <motion.div key={ expandedComments[comment._id] ? \"expanded\" : \"collapsed\" } initial={{ height: 0, opacity: 0 }} animate={{ height: \"auto\", opacity: 1 }} exit={{ height: 0, opacity: 0 }} transition={{ duration: 0.2 }} className=\"overflow-hidden w-full\" > <p className=\"text-gray-300 break-words whitespace-pre-line\"> {expandedComments[comment._id] ? comment.text : `${comment.text.slice(0, 150)}...`} </p> </motion.div> </AnimatePresence> {comment.text.length > 150 && ( <button onClick={() => toggleComment(comment._id)} className=\"text-purple-400 hover:text-purple-300 text-sm font-medium mt-1 transition-colors\" > {expandedComments[comment._id] ? \"Show less\" : \"Show more\"} </button> )} </div> <p className=\"text-xs text-gray-500 mt-2\"> {moment(comment.createdAt).fromNow()} </p> </div> </div> </motion.div> ))} </div> </motion.div> )} </AnimatePresence> </motion.div> ); }; export default PostCard; "
      },
      {
        "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\src\\Components\\PostDetail.jsx",
        "content": "import React, { useEffect, useState } from \"react\"; import { useParams, useNavigate } from \"react-router-dom\"; import { getSinglePost, likePost, addComment } from \"../api\"; import { fetchUserData } from \"../api\"; import { HeartIcon, ChatBubbleOvalLeftIcon, ArrowLeftIcon, } from \"@heroicons/react/24/outline\"; import { HeartIcon as HeartIconSolid } from \"@heroicons/react/24/solid\"; import moment from \"moment\"; const PostDetail = () => { const { id } = useParams(); const navigate = useNavigate(); const [post, setPost] = useState(null); const [loading, setLoading] = useState(true); const [error, setError] = useState(\"\"); const [commentText, setCommentText] = useState(\"\"); const [userLiked, setUserLiked] = useState(false); const [currentUser, setCurrentUser] = useState(null); const [isCommenting, setIsCommenting] = useState(false); useEffect(() => { const fetchCurrentUser = async () => { try { const user = await fetchUserData(); setCurrentUser(user); } catch (err) { console.error(\"Error fetching user data:\", err); } }; fetchCurrentUser(); }, []); useEffect(() => { const fetchPost = async () => { try { const response = await getSinglePost(id); console.log(\"Fetched post:\", response); setPost(response); if (currentUser) { const isLiked = response.likes.some( (like) => like._id === currentUser._id ); setUserLiked(isLiked); } setError(\"\"); } catch (err) { setError(\"Failed to load post\"); console.error(\"Error fetching post:\", err); } finally { setLoading(false); } }; if (currentUser) { fetchPost(); } }, [id, currentUser]); const handleLike = async () => { try { const updatedPost = await likePost(id); setPost(updatedPost); if (currentUser) { const isLiked = updatedPost.likes.some( (like) => like._id === currentUser._id ); setUserLiked(isLiked); } } catch (err) { console.error(\"Error liking post:\", err); } }; const handleCommentSubmit = async (e) => { e.preventDefault(); if (!commentText.trim()) return; setIsCommenting(true); try { const updatedPost = await addComment(id, commentText); setPost(updatedPost); setCommentText(\"\"); } catch (err) { console.error(\"Error adding comment:\", err); } finally { setIsCommenting(false); } }; if (loading) return ( <div className=\"flex justify-center items-center h-screen\"> Loading post... </div> ); if (error) return <div className=\"text-red-500 text-center p-8\">{error}</div>; if (!post) return <div className=\"text-center p-8\">Post not found</div>; return ( <div className=\"fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center p-4\"> <div className=\"bg-white dark:bg-gray-900 rounded-lg shadow-lg w-full max-w-2xl max-h-[90vh] overflow-y-auto\"> {} <div className=\"p-4 border-b dark:border-gray-700 flex items-center\"> <button onClick={() => navigate(-1)} className=\"p-2 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-full\" > <ArrowLeftIcon className=\"h-6 w-6 text-gray-700 dark:text-gray-300\" /> </button> <h2 className=\"text-xl font-bold ml-2 dark:text-white\">Post</h2> </div> {} <div className=\"p-6\"> <div className=\"flex items-center mb-4\"> <div className=\"w-10 h-10 bg-gray-200 rounded-full flex items-center justify-center\"> <span className=\"text-gray-700 dark:text-gray-300\"> {post.user?.username?.charAt(0).toUpperCase() || \"U\"} </span> </div> <div className=\"ml-3\"> <h3 className=\"font-semibold dark:text-white\"> {post.user?.username || \"Unknown author\"} </h3> <p className=\"text-sm text-gray-500 dark:text-gray-400\"> {moment(post.createdAt).fromNow()} </p> </div> </div> <p className=\"text-gray-800 dark:text-gray-200 mb-6\"> {post.content} </p> {} <div className=\"flex items-center space-x-4 mb-6\"> <button onClick={handleLike} className=\"flex items-center text-gray-600 dark:text-gray-400 hover:text-red-500\" > {userLiked ? ( <HeartIconSolid className=\"h-6 w-6 text-red-500\" /> ) : ( <HeartIcon className=\"h-6 w-6\" /> )} <span className=\"ml-1\">{post.likes?.length || 0}</span> </button> <button className=\"flex items-center text-gray-600 dark:text-gray-400 hover:text-blue-500\"> <ChatBubbleOvalLeftIcon className=\"h-6 w-6\" /> <span className=\"ml-1\">{post.comments?.length || 0}</span> </button> </div> {} <div className=\"mt-6\"> <h3 className=\"text-lg font-semibold mb-4 dark:text-white\"> Comments </h3> <form onSubmit={handleCommentSubmit} className=\"mb-6\"> <textarea value={commentText} onChange={(e) => setCommentText(e.target.value)} placeholder=\"Add a comment...\" className=\"w-full p-2 border border-gray-300 dark:border-gray-700 rounded-lg mb-2 dark:bg-gray-800 dark:text-white\" rows=\"3\" /> <button type=\"submit\" disabled={isCommenting} className=\"bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 disabled:opacity-50\" > {isCommenting ? \"Submitting...\" : \"Submit Comment\"} </button> </form> {post.comments?.map((comment, index) => ( <div key={index} className=\"mb-4\"> <div className=\"flex items-center\"> <div className=\"w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center\"> <span className=\"text-gray-700 dark:text-gray-300\"> {comment.user?.username?.charAt(0).toUpperCase() || \"U\"} </span> </div> <div className=\"ml-3\"> <span className=\"font-medium dark:text-white\"> {comment.user?.username || \"Unknown user\"} </span> <span className=\"ml-2 text-gray-600 dark:text-gray-400\"> {comment.text} </span> </div> </div> <p className=\"text-xs text-gray-500 dark:text-gray-400 ml-11\"> {moment(comment.createdAt).fromNow()} </p> </div> ))} </div> </div> </div> </div> ); }; export default PostDetail; "
      },
      {
        "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\src\\Components\\PostFeed.jsx",
        "content": "import React from \"react\"; import { useQuery, useQueryClient } from \"@tanstack/react-query\"; import PostCard from \"./PostCard\"; import SkeletonLoader from \"./SkeletonLoader\"; import { getPosts } from \"../api/posts\"; import useSocket from \"../hooks/useSocket\"; import { useAuth } from \"../context/AuthContext\"; const PostFeed = () => { const queryClient = useQueryClient(); const { user } = useAuth(); const { data: posts, isLoading, error, } = useQuery({ queryKey: [\"posts\"], queryFn: getPosts, }); useSocket({ likeUpdate: (data) => { queryClient.setQueryData([\"posts\"], (oldPosts) => { return oldPosts.map((post) => { if (post._id === data.postId) { return { ...post, likes: data.likes, likeCount: data.likes.length, isLiked: data.likes.includes(user?._id), }; } return post; }); }); }, newComment: (commentData) => { queryClient.setQueryData([\"posts\"], (oldPosts) => { return oldPosts.map((post) => { if (post._id === commentData.postId) { return { ...post, comments: [commentData, ...post.comments], commentCount: post.commentCount + 1, }; } return post; }); }); }, }); if (isLoading) return <SkeletonLoader count={3} />; if (error) return <div>Error loading posts</div>; return ( <div className=\"space-y-6\"> {posts?.map((post) => ( <PostCard key={post._id} post={{ ...post, isLiked: post.likes.includes(user?._id), likeCount: post.likes.length, commentCount: post.comments.length, }} /> ))} </div> ); }; export default PostFeed; "
      },
      {
        "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\src\\context\\AuthContext.jsx",
        "content": "import { createContext, useContext, useState, useEffect } from \"react\"; import { fetchUserData } from \"../api/users\"; const AuthContext = createContext(); export const AuthProvider = ({ children }) => { const [user, setUser] = useState(null); const [loading, setLoading] = useState(true); useEffect(() => { const checkAuth = async () => { try { const userData = await fetchUserData(); setUser(userData); } catch (err) { setUser(null); } finally { setLoading(false); } }; checkAuth(); }, []); const value = { user, loading, login: (userData) => setUser(userData), logout: () => { localStorage.removeItem(\"token\"); setUser(null); }, }; return ( <AuthContext.Provider value={value}> {!loading && children} </AuthContext.Provider> ); }; export const useAuth = () => useContext(AuthContext); "
      },
      {
        "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\src\\hooks\\usePosts.js",
        "content": "import { useMutation, useQueryClient } from \"@tanstack/react-query\"; import { createPost, likePost, addComment, deletePost } from \"../api/posts\"; export const useCreatePost = () => { const queryClient = useQueryClient(); return useMutation(createPost, { onSuccess: () => { queryClient.invalidateQueries([\"posts\"]); }, onError: (error) => { console.error(\"Create post error:\", error); }, }); }; export const useLikePost = () => { const queryClient = useQueryClient(); return useMutation(likePost, { onMutate: async (postId) => { await queryClient.cancelQueries([\"posts\"]); const previousPosts = queryClient.getQueryData([\"posts\"]); queryClient.setQueryData([\"posts\"], (old) => old.map((post) => post._id === postId ? { ...post, likes: [...post.likes, \"temp\"], isLiked: true } : post ) ); return { previousPosts }; }, onError: (err, postId, context) => { queryClient.setQueryData([\"posts\"], context.previousPosts); }, onSettled: () => { queryClient.invalidateQueries([\"posts\"]); }, }); }; export const useAddComment = (postId) => { const queryClient = useQueryClient(); return useMutation((comment) => addComment(postId, comment), { onSuccess: () => { queryClient.invalidateQueries([\"post\", postId]); }, }); }; "
      },
      {
        "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\src\\hooks\\useSocket.js",
        "content": "import { useEffect } from \"react\"; import io from \"socket.io-client\"; require(\"dotenv\").config(); const useSocket = (eventHandlers) => { useEffect(() => { const socket = io(process.env.VITE_API_URL, { withCredentials: true, transports: [\"websocket\"], }); socket.on(\"connect\", () => { console.log(\"Connected to WebSocket\"); }); Object.entries(eventHandlers).forEach(([event, handler]) => { socket.on(event, handler); }); return () => { socket.off(); socket.disconnect(); }; }, [eventHandlers]); }; export default useSocket; "
      },
      {
        "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\src\\pages\\Home.jsx",
        "content": "import React, { useEffect, useState, useCallback } from \"react\"; import { getPosts, createPost, likePost } from \"../api\"; import PostCard from \"../Components/PostCard\"; import { useSelector } from \"react-redux\"; import { SparklesIcon, ExclamationTriangleIcon, CameraIcon, } from \"@heroicons/react/24/outline\"; import { motion, AnimatePresence } from \"framer-motion\"; import SkeletonLoader from \"../Components/SkeletonLoader\"; import useInfiniteScroll from \"../hooks/useInfiniteScroll\"; const Home = () => { const [posts, setPosts] = useState([]); const [loading, setLoading] = useState(true); const [error, setError] = useState(null); const [title, setTitle] = useState(\"\"); const [content, setContent] = useState(\"\"); const [isCreating, setIsCreating] = useState(false); const { user } = useSelector((state) => state.user); const [image, setImage] = useState(null); const [imagePreview, setImagePreview] = useState(\"\"); const [hasMore, setHasMore] = useState(true); const [page, setPage] = useState(1); const TITLE_CHARACTER_LIMIT = 100; const handleLike = async (postId) => { try { const updatedPost = await likePost(postId); setPosts((prevPosts) => prevPosts.map((post) => post._id === updatedPost._id ? updatedPost : post ) ); } catch (err) { console.error(\"Error liking post:\", err); setError({ message: \"Failed to like post. Please try again.\", status: \"Error\", }); } }; const fetchPosts = useCallback(async () => { setLoading(true); setError(null); try { const response = await getPosts(page); console.log(\"API Response:\", response); const newPosts = response.posts || []; setPosts((prev) => (page === 1 ? newPosts : [...prev, ...newPosts])); setHasMore(response.hasMore); } catch (err) { console.error(\"Error fetching posts:\", err); setError({ message: err.message || \"Failed to fetch posts.\", status: err.response?.status || \"Network Error\", }); } finally { setLoading(false); } }, [page]); useEffect(() => { fetchPosts(); }, [fetchPosts]); const [lastPostRef] = useInfiniteScroll({ loading, hasMore, onLoadMore: () => setPage((prev) => prev + 1), }); const handleImageChange = (e) => { const file = e.target.files[0]; if (file) { const validImageTypes = [\"image/jpeg\", \"image/png\"]; if (validImageTypes.includes(file.type)) { setImage(file); try { setImagePreview(URL.createObjectURL(file)); } catch (error) { console.error(\"Error creating object URL:\", error); setError({ message: \"Failed to load image preview.\", }); } } else { setError({ message: \"Invalid file type. Please upload an image (JPEG or PNG).\", }); } } }; const handleSubmit = async (e) => { e.preventDefault(); setIsCreating(true); try { const formData = new FormData(); formData.append(\"title\", title); formData.append(\"content\", content); if (image instanceof File) { formData.append(\"image\", image); } const response = await createPost(formData); setPosts((prev) => [ { ...response, user: { _id: user._id, username: user.username }, image: response.image || null, }, ...prev, ]); setTitle(\"\"); setContent(\"\"); setImage(null); setImagePreview(\"\"); } catch (err) { setError({ message: err.message || \"Failed to create post\" }); } finally { setIsCreating(false); } }; const ErrorMessage = ({ error }) => ( <motion.div initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0, y: -20 }} className=\"fixed top-2 left-2 right-2 sm:top-4 sm:right-4 sm:left-auto z-50\" > <div className=\"bg-gray-900/90 backdrop-blur-lg p-3 sm:p-4 rounded-lg sm:rounded-xl shadow-2xl border border-purple-500/20 flex items-start gap-2 sm:gap-3 max-w-md\"> <div className=\"bg-purple-500/10 p-1.5 sm:p-2 rounded-md\"> <ExclamationTriangleIcon className=\"h-5 w-5 sm:h-6 sm:w-6 text-purple-400\" /> </div> <div> <h3 className=\"text-sm sm:text-base font-medium bg-gradient-to-r from-purple-300 to-blue-300 bg-clip-text text-transparent\"> {error.status} Error </h3> <p className=\"text-xs sm:text-sm text-gray-300 mt-0.5\"> {error.message} </p> <button onClick={() => setError(null)} className=\"mt-1.5 text-xs sm:text-sm text-purple-400 hover:text-purple-300 transition-colors\" > Dismiss </button> </div> </div> </motion.div> ); return ( <div className=\"relative min-h-screen bg-gray-950 pb-16 sm:pb-0\"> <AnimatePresence> {error && <ErrorMessage error={error} />} </AnimatePresence> <div className=\"container mx-auto max-w-2xl px-2 sm:px-4 py-6 sm:py-8 pt-16 sm:pt-20\"> {} {loading && ( <motion.div className=\"text-center py-6\"> <p className=\"text-gray-400\">Loading new posts...</p> </motion.div> )} {} <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} className=\"mb-6 sm:mb-8 flex items-center justify-center gap-2 sm:gap-3\" > <motion.div whileHover={{ rotate: 15 }} className=\"bg-purple-600/20 p-2 sm:p-3 rounded-lg sm:rounded-xl\" > <SparklesIcon className=\"h-6 w-6 sm:h-8 sm:w-8 text-purple-400\" /> </motion.div> <h1 className=\"text-2xl sm:text-4xl font-bold bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent drop-shadow-[0_0_20px_rgba(129,140,248,0.3)]\"> Recent Posts </h1> </motion.div> {} <motion.div initial={{ opacity: 0, scale: 0.95 }} animate={{ opacity: 1, scale: 1 }} className=\"mb-6 sm:mb-8 p-3 sm:p-6 bg-gray-900/80 backdrop-blur-md rounded-xl sm:rounded-2xl border border-gray-800/50 shadow-lg hover:shadow-xl transition-all\" > <h2 className=\"text-lg sm:text-xl font-semibold mb-3 sm:mb-4 bg-gradient-to-r from-purple-300 to-blue-300 bg-clip-text text-transparent\"> Create a New Post </h2> <form onSubmit={handleSubmit} className=\"space-y-3 sm:space-y-4\"> {} <div className=\"relative\"> <motion.input whileFocus={{ scale: 1.02 }} type=\"text\" value={title} onChange={(e) => setTitle(e.target.value)} placeholder=\"Post title\" className=\"w-full px-3 sm:px-4 py-2 sm:py-3 text-sm sm:text-base rounded-lg bg-gray-800/40 border border-gray-700/50 focus:ring-2 focus:ring-purple-500 focus:border-transparent text-gray-200 placeholder-gray-500\" required disabled={isCreating} maxLength={TITLE_CHARACTER_LIMIT} /> <div className=\"absolute bottom-1.5 sm:bottom-2 right-2 text-xs text-gray-400\"> {title.length}/{TITLE_CHARACTER_LIMIT} </div> </div> {} <motion.textarea whileFocus={{ scale: 1.02 }} value={content} onChange={(e) => setContent(e.target.value)} placeholder=\"What's on your mind?\" className=\"w-full px-3 sm:px-4 py-2 sm:py-3 text-sm sm:text-base rounded-lg bg-gray-800/40 border border-gray-700/50 focus:ring-2 focus:ring-purple-500 focus:border-transparent text-gray-200 placeholder-gray-500\" rows=\"3\" required disabled={isCreating} /> {} <div className=\"space-y-2\"> <label className=\"block text-sm sm:text-base font-medium text-gray-400\"> Upload Image (Optional) </label> <motion.label whileHover={{ scale: 1.02 }} className=\"flex flex-col items-center justify-center w-full h-24 sm:h-32 border-2 border-dashed border-gray-700/50 rounded-lg cursor-pointer hover:border-purple-500/50 transition-all relative overflow-hidden group\" > <div className=\"flex flex-col items-center justify-center pt-3 sm:pt-5 pb-4 sm:pb-6 z-10\"> <motion.div animate={{ y: [0, -5, 0] }} transition={{ duration: 2, repeat: Infinity }} > <CameraIcon className=\"h-6 w-6 sm:h-8 sm:w-8 text-gray-500 group-hover:text-purple-400 transition-colors\" /> </motion.div> <p className=\"text-xs sm:text-sm text-gray-500 group-hover:text-purple-300 transition-colors text-center px-2\"> Click to upload or drag and drop </p> </div> <div className=\"absolute inset-0 bg-gradient-to-r from-purple-600/5 to-blue-600/5 opacity-0 group-hover:opacity-100 transition-opacity\" /> <input type=\"file\" onChange={handleImageChange} className=\"hidden\" accept=\"image} <motion.button whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }} type=\"submit\" className=\"w-full py-2 sm:py-3 rounded-lg bg-gradient-to-r from-purple-600 to-blue-600 text-white font-medium hover:shadow-xl transition-all relative overflow-hidden group\" disabled={isCreating} > <span className=\"relative z-10 text-sm sm:text-base\"> {isCreating ? \"Creating...\" : \"Create Post\"} </span> <div className=\"absolute inset-0 bg-gradient-to-r from-white/15 to-transparent opacity-0 group-hover:opacity-100 transition-opacity\" /> </motion.button> </form> </motion.div> {} <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className=\"space-y-4 sm:space-y-6 pb-8\" > {posts.map((post, index) => { console.log(\"Rendering post:\", post); return ( <div ref={index === posts.length - 1 ? lastPostRef : null} key={post._id} > <PostCard {...post} currentUserId={user?._id} onLike={handleLike} onCommentAdded={(updatedPost) => { setPosts((prevPosts) => prevPosts.map((p) => p._id === updatedPost._id ? updatedPost : p ) ); }} /> </div> ); })} {loading && <SkeletonLoader count={3} />} {!loading && !hasMore && ( <motion.div initial={{ scale: 0.95 }} animate={{ scale: 1 }} className=\"text-center py-6 sm:py-8 bg-gray-900/50 rounded-lg border border-gray-800/40\" > <p className=\"text-sm sm:text-base text-gray-400\"> No more posts to load </p> </motion.div> )} </motion.div> </div> </div> ); }; export default Home; "
      },
      {
        "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\src\\pages\\Login.jsx",
        "content": "import React, { useState } from \"react\"; import { useDispatch } from \"react-redux\"; import { setUser } from \"../redux/userSlice\"; import { login } from \"../api\"; import { Link, useNavigate } from \"react-router-dom\"; import { SparklesIcon } from \"@heroicons/react/24/outline\"; const Login = () => { const dispatch = useDispatch(); const navigate = useNavigate(); const [email, setEmail] = useState(\"\"); const [password, setPassword] = useState(\"\"); const [error, setError] = useState(\"\"); const [loading, setLoading] = useState(false); const handleLogin = async (e) => { e.preventDefault(); setLoading(true); setError(\"\"); try { const response = await login({ email, password }); if (response.user && response.token) { localStorage.setItem(\"token\", response.token); dispatch( setUser({ user: response.user, token: response.token, }) ); navigate(\"/home\"); } else { setError(\"Invalid response from server. Please try again.\"); } } catch (err) { console.error(\"Error during login:\", err); if (err.response) { setError( err.response.data.message || \"Login failed. Please check your credentials.\" ); } else if (err.request) { setError(\"No response from server. Please check your connection.\"); } else { setError(\"An unexpected error occurred. Please try again.\"); } } finally { setLoading(false); } }; return ( <div className=\"min-h-screen bg-gray-950 flex items-center justify-center p-4\"> {} <div className=\"relative bg-gray-900/80 backdrop-blur-md border border-gray-800/50 rounded-2xl p-8 max-w-md w-full text-center space-y-6 overflow-hidden shadow-lg\"> {} <div className=\"flex justify-center relative\"> <SparklesIcon className=\"h-16 w-16 text-purple-400 relative z-10\" /> <div className=\"absolute w-32 h-32 bg-purple-600/20 blur-[50px] rounded-full\" /> </div> {} <h1 className=\"text-3xl font-bold bg-gradient-to-r from-purple-300 to-blue-300 bg-clip-text text-transparent\"> Welcome Back </h1> {} <form onSubmit={handleLogin} className=\"space-y-4\"> {} <div className=\"text-left\"> <label className=\"block text-sm font-medium text-gray-300 mb-1\"> Email </label> <input type=\"email\" placeholder=\"Enter your email\" value={email} onChange={(e) => setEmail(e.target.value)} className=\"w-full p-3 rounded-lg bg-gray-800/40 border border-gray-700/50 focus:ring-2 focus:ring-purple-500 focus:border-transparent text-white placeholder-gray-400\" required /> </div> {} <div className=\"text-left\"> <label className=\"block text-sm font-medium text-gray-300 mb-1\"> Password </label> <input type=\"password\" placeholder=\"Enter your password\" value={password} onChange={(e) => setPassword(e.target.value)} className=\"w-full p-3 rounded-lg bg-gray-800/40 border border-gray-700/50 focus:ring-2 focus:ring-purple-500 focus:border-transparent text-white placeholder-gray-400\" required /> </div> {} <button type=\"submit\" disabled={loading} className=\"w-full py-3 rounded-lg bg-gradient-to-r from-purple-600 to-blue-600 text-white font-medium hover:opacity-90 transition-all focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 relative overflow-hidden group mt-4\" > <span className=\"relative z-10\"> {loading ? ( <svg className=\"animate-spin h-5 w-5 text-white mx-auto\" xmlns=\"http: fill=\"none\" viewBox=\"0 0 24 24\" > <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\" ></circle> <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\" ></path> </svg> ) : ( \"Login\" )} </span> <div className=\"absolute inset-0 bg-gradient-to-r from-white/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300\" /> </button> {} {error && ( <p className=\"text-red-500 text-sm mt-4 text-center bg-red-900/20 p-2 rounded-lg\"> {error} </p> )} </form> {} <div className=\"relative flex items-center justify-center\"> <div className=\"flex-grow border-t border-gray-700/50\"></div> <span className=\"mx-4 text-gray-400\">or</span> <div className=\"flex-grow border-t border-gray-700/50\"></div> </div> {} <p className=\"mt-4 text-center text-gray-400\"> Don't have an account?{\" \"} <Link to=\"/register\" className=\"text-purple-400 hover:underline font-medium\" > Sign up </Link> </p> </div> </div> ); }; export default Login; "
      },
      {
        "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\src\\pages\\Profile.jsx",
        "content": "import React, { useEffect, useState, useCallback } from \"react\"; import { useSelector } from \"react-redux\"; import { getPosts } from \"../api\"; import PostCard from \"../Components/PostCard\"; import { SparklesIcon } from \"@heroicons/react/24/outline\"; import { motion, AnimatePresence } from \"framer-motion\"; import SkeletonLoader from \"../Components/SkeletonLoader\"; import useInfiniteScroll from \"../hooks/useInfiniteScroll\"; const Profile = () => { const { user } = useSelector((state) => state.user); const [posts, setPosts] = useState([]); const [loading, setLoading] = useState(true); const [error, setError] = useState(\"\"); const [hasMore, setHasMore] = useState(true); const [page, setPage] = useState(1); const fetchUserPosts = useCallback(async () => { setLoading(true); setError(\"\"); try { const response = await getPosts(page); const newPosts = response.posts || []; const userPosts = newPosts.filter((post) => post.user?._id === user?._id); setPosts((prev) => (page === 1 ? userPosts : [...prev, ...userPosts])); setHasMore(response.hasMore); } catch (err) { console.error(\"Error fetching user posts:\", err); setError(\"Failed to fetch posts. Please try again later.\"); } finally { setLoading(false); } }, [page, user]); useEffect(() => { fetchUserPosts(); }, [fetchUserPosts]); const [lastPostRef] = useInfiniteScroll({ loading, hasMore, onLoadMore: () => setPage((prev) => prev + 1), }); if (loading && page === 1) { return <SkeletonLoader count={3} />; } if (error) { return ( <div className=\"min-h-screen flex items-center justify-center p-4\"> <div className=\"bg-red-900/30 text-red-400 p-4 rounded-lg border border-red-800/50 backdrop-blur-md\"> {error} </div> </div> ); } return ( <div className=\"min-h-screen bg-gray-950 pb-16 sm:pb-0\"> <div className=\"container mx-auto max-w-2xl px-4 py-8 pt-20\"> {} <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} className=\"mb-8 flex items-center justify-center gap-3\" > <motion.div whileHover={{ rotate: 15 }} className=\"bg-purple-600/20 p-3 rounded-xl\" > <SparklesIcon className=\"h-8 w-8 text-purple-400\" /> </motion.div> <h1 className=\"text-3xl font-bold bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent drop-shadow-[0_0_20px_rgba(129,140,248,0.3)]\"> {user?.username}'s Posts </h1> </motion.div> {} <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className=\"space-y-6 pb-8\" > {posts.map((post, index) => ( <div ref={index === posts.length - 1 ? lastPostRef : null} key={post._id} > <PostCard {...post} currentUserId={user?._id} /> </div> ))} {loading && page > 1 && <SkeletonLoader count={1} />} {!loading && posts.length === 0 && ( <motion.div initial={{ scale: 0.95 }} animate={{ scale: 1 }} className=\"text-center py-6 sm:py-8 bg-gray-900/50 rounded-lg border border-gray-800/40\" > <p className=\"text-sm sm:text-base text-gray-400\"> No posts available. Start creating posts! </p> </motion.div> )} {!loading && !hasMore && posts.length > 0 && ( <motion.div initial={{ scale: 0.95 }} animate={{ scale: 1 }} className=\"text-center py-6 sm:py-8 bg-gray-900/50 rounded-lg border border-gray-800/40\" > <p className=\"text-sm sm:text-base text-gray-400\"> No more posts to load </p> </motion.div> )} </motion.div> </div> </div> ); }; export default Profile; "
      },
      {
        "file": "C:\\Users\\mykal\\Documents\\F\\feelio.github.io\\src\\pages\\Register.jsx",
        "content": "import React, { useState } from \"react\"; import { useDispatch } from \"react-redux\"; import { setUser } from \"../redux/userSlice\"; import { register } from \"../api\"; import { Link, useNavigate } from \"react-router-dom\"; import { SparklesIcon } from \"@heroicons/react/24/outline\"; const Register = () => { const dispatch = useDispatch(); const navigate = useNavigate(); const [username, setUsername] = useState(\"\"); const [email, setEmail] = useState(\"\"); const [password, setPassword] = useState(\"\"); const [error, setError] = useState(\"\"); const [loading, setLoading] = useState(false); const handleRegister = async (e) => { e.preventDefault(); setLoading(true); setError(\"\"); try { const response = await register({ username, email, password }); if (response && response.user && response.token) { localStorage.setItem(\"token\", response.token); dispatch( setUser({ user: response.user, token: response.token, }) ); navigate(\"/home\"); } else { setError(\"Unexpected response data format\"); } } catch (err) { console.error(\"Error during registration:\", err); if (err.response) { setError( err.response.data.message || \"Registration failed: Unknown error\" ); } else { setError(\"Registration failed: No response from server\"); } } finally { setLoading(false); } }; return ( <div className=\"min-h-screen bg-gray-950 flex items-center justify-center p-4\"> {} <div className=\"relative bg-gray-900/80 backdrop-blur-md border border-gray-800/50 rounded-2xl p-8 max-w-md w-full text-center space-y-6 overflow-hidden shadow-lg\"> {} <div className=\"flex justify-center relative\"> <SparklesIcon className=\"h-16 w-16 text-purple-400 relative z-10\" /> <div className=\"absolute w-32 h-32 bg-purple-600/20 blur-[50px] rounded-full\" /> </div> {} <h1 className=\"text-3xl font-bold bg-gradient-to-r from-purple-300 to-blue-300 bg-clip-text text-transparent\"> Create Account </h1> {} <form onSubmit={handleRegister} className=\"space-y-4\"> {} <div className=\"text-left\"> <label className=\"block text-sm font-medium text-gray-300 mb-1\"> Username </label> <input type=\"text\" placeholder=\"Enter your username\" value={username} onChange={(e) => setUsername(e.target.value)} className=\"w-full p-3 rounded-lg bg-gray-800/40 border border-gray-700/50 focus:ring-2 focus:ring-purple-500 focus:border-transparent text-white placeholder-gray-400\" required /> </div> {} <div className=\"text-left\"> <label className=\"block text-sm font-medium text-gray-300 mb-1\"> Email </label> <input type=\"email\" placeholder=\"Enter your email\" value={email} onChange={(e) => setEmail(e.target.value)} className=\"w-full p-3 rounded-lg bg-gray-800/40 border border-gray-700/50 focus:ring-2 focus:ring-purple-500 focus:border-transparent text-white placeholder-gray-400\" required /> </div> {} <div className=\"text-left\"> <label className=\"block text-sm font-medium text-gray-300 mb-1\"> Password </label> <input type=\"password\" placeholder=\"Enter your password\" value={password} onChange={(e) => setPassword(e.target.value)} className=\"w-full p-3 rounded-lg bg-gray-800/40 border border-gray-700/50 focus:ring-2 focus:ring-purple-500 focus:border-transparent text-white placeholder-gray-400\" required /> </div> {} <button type=\"submit\" disabled={loading} className=\"w-full py-3 rounded-lg bg-gradient-to-r from-purple-600 to-blue-600 text-white font-medium hover:opacity-90 transition-all focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 relative overflow-hidden group mt-4\" > <span className=\"relative z-10\"> {loading ? ( <svg className=\"animate-spin h-5 w-5 text-white mx-auto\" xmlns=\"http: fill=\"none\" viewBox=\"0 0 24 24\" > <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\" ></circle> <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\" ></path> </svg> ) : ( \"Create Account\" )} </span> <div className=\"absolute inset-0 bg-gradient-to-r from-white/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300\" /> </button> {} {error && ( <p className=\"text-red-500 text-sm mt-4 text-center bg-red-900/20 p-2 rounded-lg\"> {error} </p> )} </form> {} <div className=\"relative flex items-center justify-center\"> <div className=\"flex-grow border-t border-gray-700/50\"></div> <span className=\"mx-4 text-gray-400\">or</span> <div className=\"flex-grow border-t border-gray-700/50\"></div> </div> {} <p className=\"mt-4 text-center text-gray-400\"> Already have an account?{\" \"} <Link to=\"/login\" className=\"text-purple-400 hover:underline font-medium\" > Log in </Link> </p> </div> </div> ); }; export default Register; "
      }
    ]
  }